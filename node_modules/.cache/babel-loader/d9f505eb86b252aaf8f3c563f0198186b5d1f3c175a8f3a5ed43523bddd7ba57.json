{"ast":null,"code":"import axios from 'axios';\nimport { getAuthToken } from './authService';\n\n// Configuration for different backends\nconst backends = {\n  nodejs: {\n    baseURL: 'http://localhost:5000/api',\n    // Node.js backend URL\n    endpoints: {\n      students: {\n        getAll: '/students',\n        getById: id => `/students/${id}`,\n        create: '/students',\n        update: id => `/students/${id}`,\n        delete: id => `/students/${id}`,\n        getByProgram: programId => `/students/program/${programId}`,\n        getByParent: parentId => `/students/parent/${parentId}`\n      },\n      programs: {\n        getAll: '/programs',\n        getById: id => `/programs/${id}`,\n        create: '/programs',\n        update: id => `/programs/${id}`,\n        delete: id => `/programs/${id}`\n      },\n      departments: {\n        getAll: '/public/departments',\n        getById: id => `/departments/${id}`,\n        create: '/departments',\n        update: id => `/departments/${id}`,\n        delete: id => `/departments/${id}`\n      },\n      majors: {\n        getAll: '/majors',\n        getById: id => `/majors/${id}`,\n        create: '/majors',\n        update: id => `/majors/${id}`,\n        delete: id => `/majors/${id}`\n      },\n      subjects: {\n        getAll: '/subjects',\n        getById: id => `/subjects/${id}`,\n        create: '/subjects',\n        update: id => `/subjects/${id}`,\n        delete: id => `/subjects/${id}`\n      },\n      teachers: {\n        getAll: '/teachers',\n        getById: id => `/teachers/${id}`,\n        create: '/teachers',\n        update: id => `/teachers/${id}`,\n        delete: id => `/teachers/${id}`\n      },\n      academicYears: {\n        getAll: '/public/academic-years',\n        getById: id => `/academic-years/${id}`,\n        create: '/academic-years',\n        update: id => `/academic-years/${id}`,\n        delete: id => `/academic-years/${id}`\n      },\n      dashboard: {\n        getStats: '/public/dashboard/stats',\n        getActivities: '/public/dashboard/activities'\n      },\n      batches: {\n        getAll: '/batches',\n        getById: id => `/batches/${id}`,\n        create: '/batches',\n        update: id => `/batches/${id}`,\n        delete: id => `/batches/${id}`\n      },\n      auth: {\n        login: '/auth/login',\n        register: '/auth/register',\n        updatePassword: '/auth/update-password'\n      }\n    }\n  },\n  fastapi: {\n    baseURL: 'http://localhost:5000/api',\n    // FastAPI backend URL on port 5000\n    endpoints: {\n      students: {\n        getAll: '/students',\n        getById: id => `/students/${id}`,\n        create: '/students',\n        update: id => `/students/${id}`,\n        delete: id => `/students/${id}`,\n        getByProgram: programId => `/students/program/${programId}`,\n        getByParent: parentId => `/students/parent/${parentId}`\n      },\n      programs: {\n        getAll: '/programs',\n        getById: id => `/programs/${id}`,\n        create: '/programs',\n        update: id => `/programs/${id}`,\n        delete: id => `/programs/${id}`\n      },\n      batches: {\n        getAll: '/batches',\n        getById: id => `/batches/${id}`,\n        create: '/batches',\n        update: id => `/batches/${id}`,\n        delete: id => `/batches/${id}`\n      },\n      auth: {\n        login: '/auth/login',\n        register: '/auth/register',\n        updatePassword: '/auth/update-password'\n      }\n    }\n  }\n};\n\n// Currently active backend (now using Node.js)\nconst activeBackend = 'nodejs';\n\n// Log the active backend configuration\nconsole.log(`Using ${activeBackend} backend at ${backends[activeBackend].baseURL}`);\n\n// Create axios instance with the active backend configuration\nconst apiClient = axios.create({\n  baseURL: backends[activeBackend].baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napiClient.interceptors.request.use(config => {\n  const token = getAuthToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle common errors\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response$data, _error$response$data$, _error$message, _error$response2;\n  // Handle database connection errors\n  if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && (_error$response$data$ = _error$response$data.message) !== null && _error$response$data$ !== void 0 && _error$response$data$.includes('Too many connections') || (_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('Too many connections')) {\n    console.error('Database connection limit reached:', error.message);\n    // Create a custom error with more information\n    const customError = new Error('Too many connections to the database. Please try again later.');\n    customError.isConnectionError = true;\n    customError.originalError = error;\n    return Promise.reject(customError);\n  }\n\n  // Handle authentication errors\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    console.error('Authentication error:', error.message);\n    // Create a custom error with more information\n    const customError = new Error('Your session has expired. Please log in again.');\n    customError.isAuthError = true;\n    customError.originalError = error;\n    return Promise.reject(customError);\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to get the endpoint for the current backend\nconst getEndpoint = (service, action, ...params) => {\n  const endpoint = backends[activeBackend].endpoints[service][action];\n  if (typeof endpoint === 'function') {\n    return endpoint(...params);\n  }\n  return endpoint;\n};\n\n// API adapter service\nconst ApiAdapter = {\n  // Student endpoints\n  students: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('students', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('students', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async studentData => {\n      const endpoint = getEndpoint('students', 'create');\n\n      // Handle file uploads differently for FastAPI\n      if (activeBackend === 'fastapi' && studentData.profile_picture instanceof File) {\n        const formData = new FormData();\n\n        // Add all student data to form data\n        Object.keys(studentData).forEach(key => {\n          if (key === 'profile_picture') {\n            formData.append('profile_picture', studentData.profile_picture);\n          } else {\n            formData.append(key, studentData[key]);\n          }\n        });\n        const response = await apiClient.post(endpoint, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        return response.data;\n      } else {\n        // Regular JSON request for Node.js backend\n        const response = await apiClient.post(endpoint, studentData);\n        return response.data;\n      }\n    },\n    update: async (id, studentData) => {\n      const endpoint = getEndpoint('students', 'update', id);\n\n      // Handle file uploads differently for FastAPI\n      if (activeBackend === 'fastapi' && studentData.profile_picture instanceof File) {\n        const formData = new FormData();\n\n        // Add all student data to form data\n        Object.keys(studentData).forEach(key => {\n          if (key === 'profile_picture') {\n            formData.append('profile_picture', studentData.profile_picture);\n          } else {\n            formData.append(key, studentData[key]);\n          }\n        });\n        const response = await apiClient.put(endpoint, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        return response.data;\n      } else {\n        // Regular JSON request for Node.js backend\n        const response = await apiClient.put(endpoint, studentData);\n        return response.data;\n      }\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('students', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n    getByProgram: async (programId, page = 1, limit = 10) => {\n      const endpoint = getEndpoint('students', 'getByProgram', programId);\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit\n        }\n      });\n      return response.data;\n    },\n    getByParent: async (parentId, page = 1, limit = 10) => {\n      const endpoint = getEndpoint('students', 'getByParent', parentId);\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit\n        }\n      });\n      return response.data;\n    }\n  },\n  // Program endpoints\n  programs: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('programs', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('programs', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async programData => {\n      const endpoint = getEndpoint('programs', 'create');\n      const response = await apiClient.post(endpoint, programData);\n      return response.data;\n    },\n    update: async (id, programData) => {\n      const endpoint = getEndpoint('programs', 'update', id);\n      const response = await apiClient.put(endpoint, programData);\n      return response.data;\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('programs', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    }\n  },\n  // Department endpoints\n  departments: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('departments', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('departments', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async departmentData => {\n      const endpoint = getEndpoint('departments', 'create');\n      const response = await apiClient.post(endpoint, departmentData);\n      return response.data;\n    },\n    update: async (id, departmentData) => {\n      const endpoint = getEndpoint('departments', 'update', id);\n      const response = await apiClient.put(endpoint, departmentData);\n      return response.data;\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('departments', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    }\n  },\n  // Major endpoints\n  majors: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('majors', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('majors', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async majorData => {\n      const endpoint = getEndpoint('majors', 'create');\n      const response = await apiClient.post(endpoint, majorData);\n      return response.data;\n    },\n    update: async (id, majorData) => {\n      const endpoint = getEndpoint('majors', 'update', id);\n      const response = await apiClient.put(endpoint, majorData);\n      return response.data;\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('majors', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    }\n  },\n  // Subject endpoints\n  subjects: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('subjects', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('subjects', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async subjectData => {\n      const endpoint = getEndpoint('subjects', 'create');\n      const response = await apiClient.post(endpoint, subjectData);\n      return response.data;\n    },\n    update: async (id, subjectData) => {\n      const endpoint = getEndpoint('subjects', 'update', id);\n      const response = await apiClient.put(endpoint, subjectData);\n      return response.data;\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('subjects', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    }\n  },\n  // Teacher endpoints\n  teachers: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('teachers', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('teachers', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async teacherData => {\n      const endpoint = getEndpoint('teachers', 'create');\n      const response = await apiClient.post(endpoint, teacherData);\n      return response.data;\n    },\n    update: async (id, teacherData) => {\n      const endpoint = getEndpoint('teachers', 'update', id);\n      const response = await apiClient.put(endpoint, teacherData);\n      return response.data;\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('teachers', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    }\n  },\n  // Academic Year endpoints\n  academicYears: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('academicYears', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('academicYears', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async academicYearData => {\n      const endpoint = getEndpoint('academicYears', 'create');\n      const response = await apiClient.post(endpoint, academicYearData);\n      return response.data;\n    },\n    update: async (id, academicYearData) => {\n      const endpoint = getEndpoint('academicYears', 'update', id);\n      const response = await apiClient.put(endpoint, academicYearData);\n      return response.data;\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('academicYears', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    }\n  },\n  // Batch endpoints\n  batches: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('batches', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: {\n          page,\n          limit,\n          search\n        }\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const endpoint = getEndpoint('batches', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    create: async batchData => {\n      const endpoint = getEndpoint('batches', 'create');\n      const response = await apiClient.post(endpoint, batchData);\n      return response.data;\n    },\n    update: async (id, batchData) => {\n      const endpoint = getEndpoint('batches', 'update', id);\n      const response = await apiClient.put(endpoint, batchData);\n      return response.data;\n    },\n    delete: async id => {\n      const endpoint = getEndpoint('batches', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    }\n  },\n  // Auth endpoints\n  auth: {\n    login: async credentials => {\n      const endpoint = getEndpoint('auth', 'login');\n      console.log(`Sending login request to: ${backends[activeBackend].baseURL}${endpoint}`);\n      console.log('With credentials:', {\n        username: credentials.username,\n        password: '******'\n      });\n      try {\n        const response = await apiClient.post(endpoint, credentials);\n        console.log('Login response received:', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Login error:', error.message);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n        throw error;\n      }\n    },\n    register: async userData => {\n      const endpoint = getEndpoint('auth', 'register');\n      const response = await apiClient.post(endpoint, userData);\n      return response.data;\n    },\n    updatePassword: async passwordData => {\n      const endpoint = getEndpoint('auth', 'updatePassword');\n      const response = await apiClient.put(endpoint, passwordData);\n      return response.data;\n    }\n  },\n  // Dashboard endpoints\n  dashboard: {\n    getStats: async () => {\n      const endpoint = '/dashboard/stats';\n      try {\n        const response = await apiClient.get(endpoint);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching dashboard stats:', error);\n        // Return mock data if API fails\n        return {\n          success: true,\n          data: {\n            students: {\n              total: 120,\n              active: 98,\n              inactive: 12,\n              graduated: 8,\n              suspended: 2\n            },\n            teachers: {\n              total: 25,\n              active: 22,\n              departments: 5\n            },\n            academics: {\n              programs: 8,\n              batches: 12,\n              departments: 5,\n              subjects: 45\n            },\n            attendance: {\n              today: 95,\n              present: 88,\n              absent: 5,\n              rate: 93\n            },\n            exams: {\n              upcoming: 3,\n              completed: 12,\n              ongoing: 1,\n              list: [{\n                name: 'Midterm Exam',\n                subject: 'Computer Science',\n                date: '2023-07-15',\n                time: '09:00 AM',\n                status: 'Scheduled'\n              }, {\n                name: 'Final Exam',\n                subject: 'Mathematics',\n                date: '2023-07-20',\n                time: '10:30 AM',\n                status: 'Scheduled'\n              }, {\n                name: 'Quiz',\n                subject: 'English',\n                date: '2023-07-12',\n                time: '02:00 PM',\n                status: 'Ongoing'\n              }]\n            },\n            payments: {\n              total: 45000,\n              pending: 8500,\n              overdue: 3200,\n              thisMonth: 12500\n            },\n            users: {\n              total: 180,\n              active: 165,\n              roles: {\n                admin: 5,\n                teacher: 25,\n                student: 120,\n                parent: 30\n              }\n            },\n            recentActivity: [{\n              title: 'New Student Registered',\n              description: 'John Doe registered as a new student',\n              time: '10 minutes ago'\n            }, {\n              title: 'Payment Received',\n              description: 'Payment of $500 received from Sarah Johnson',\n              time: '1 hour ago'\n            }, {\n              title: 'Exam Results Published',\n              description: 'Results for Computer Science midterm published',\n              time: '3 hours ago'\n            }, {\n              title: 'Attendance Marked',\n              description: 'Attendance for Batch CS-2023 marked by Prof. Smith',\n              time: '5 hours ago'\n            }, {\n              title: 'New Course Added',\n              description: 'Advanced Database Systems added to curriculum',\n              time: '1 day ago'\n            }]\n          }\n        };\n      }\n    },\n    getRecentActivity: async (limit = 10) => {\n      const endpoint = '/dashboard/recent-activity';\n      try {\n        const response = await apiClient.get(endpoint, {\n          params: {\n            limit\n          }\n        });\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching recent activity:', error);\n        return {\n          success: true,\n          data: [{\n            title: 'New Student Registered',\n            description: 'John Doe registered as a new student',\n            time: '10 minutes ago'\n          }, {\n            title: 'Payment Received',\n            description: 'Payment of $500 received from Sarah Johnson',\n            time: '1 hour ago'\n          }, {\n            title: 'Exam Results Published',\n            description: 'Results for Computer Science midterm published',\n            time: '3 hours ago'\n          }, {\n            title: 'Attendance Marked',\n            description: 'Attendance for Batch CS-2023 marked by Prof. Smith',\n            time: '5 hours ago'\n          }, {\n            title: 'New Course Added',\n            description: 'Advanced Database Systems added to curriculum',\n            time: '1 day ago'\n          }]\n        };\n      }\n    },\n    getUpcomingExams: async (limit = 5) => {\n      const endpoint = '/dashboard/upcoming-exams';\n      try {\n        const response = await apiClient.get(endpoint, {\n          params: {\n            limit\n          }\n        });\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching upcoming exams:', error);\n        return {\n          success: true,\n          data: [{\n            name: 'Midterm Exam',\n            subject: 'Computer Science',\n            date: '2023-07-15',\n            time: '09:00 AM',\n            status: 'Scheduled'\n          }, {\n            name: 'Final Exam',\n            subject: 'Mathematics',\n            date: '2023-07-20',\n            time: '10:30 AM',\n            status: 'Scheduled'\n          }, {\n            name: 'Quiz',\n            subject: 'English',\n            date: '2023-07-12',\n            time: '02:00 PM',\n            status: 'Ongoing'\n          }]\n        };\n      }\n    }\n  }\n};\nexport default ApiAdapter;","map":{"version":3,"names":["axios","getAuthToken","backends","nodejs","baseURL","endpoints","students","getAll","getById","id","create","update","delete","getByProgram","programId","getByParent","parentId","programs","departments","majors","subjects","teachers","academicYears","dashboard","getStats","getActivities","batches","auth","login","register","updatePassword","fastapi","activeBackend","console","log","apiClient","headers","interceptors","request","use","config","token","Authorization","error","Promise","reject","response","_error$response","_error$response$data","_error$response$data$","_error$message","_error$response2","data","message","includes","customError","Error","isConnectionError","originalError","status","isAuthError","getEndpoint","service","action","params","endpoint","ApiAdapter","page","limit","search","get","studentData","profile_picture","File","formData","FormData","Object","keys","forEach","key","append","post","put","programData","departmentData","majorData","subjectData","teacherData","academicYearData","batchData","credentials","username","password","userData","passwordData","success","total","active","inactive","graduated","suspended","academics","attendance","today","present","absent","rate","exams","upcoming","completed","ongoing","list","name","subject","date","time","payments","pending","overdue","thisMonth","users","roles","admin","teacher","student","parent","recentActivity","title","description","getRecentActivity","getUpcomingExams"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/api-adapter.js"],"sourcesContent":["import axios from 'axios';\nimport { getAuthToken } from './authService';\n\n// Configuration for different backends\nconst backends = {\n  nodejs: {\n    baseURL: 'http://localhost:5000/api',  // Node.js backend URL\n    endpoints: {\n      students: {\n        getAll: '/students',\n        getById: (id) => `/students/${id}`,\n        create: '/students',\n        update: (id) => `/students/${id}`,\n        delete: (id) => `/students/${id}`,\n        getByProgram: (programId) => `/students/program/${programId}`,\n        getByParent: (parentId) => `/students/parent/${parentId}`,\n      },\n      programs: {\n        getAll: '/programs',\n        getById: (id) => `/programs/${id}`,\n        create: '/programs',\n        update: (id) => `/programs/${id}`,\n        delete: (id) => `/programs/${id}`,\n      },\n      departments: {\n        getAll: '/public/departments',\n        getById: (id) => `/departments/${id}`,\n        create: '/departments',\n        update: (id) => `/departments/${id}`,\n        delete: (id) => `/departments/${id}`,\n      },\n      majors: {\n        getAll: '/majors',\n        getById: (id) => `/majors/${id}`,\n        create: '/majors',\n        update: (id) => `/majors/${id}`,\n        delete: (id) => `/majors/${id}`,\n      },\n      subjects: {\n        getAll: '/subjects',\n        getById: (id) => `/subjects/${id}`,\n        create: '/subjects',\n        update: (id) => `/subjects/${id}`,\n        delete: (id) => `/subjects/${id}`,\n      },\n      teachers: {\n        getAll: '/teachers',\n        getById: (id) => `/teachers/${id}`,\n        create: '/teachers',\n        update: (id) => `/teachers/${id}`,\n        delete: (id) => `/teachers/${id}`,\n      },\n      academicYears: {\n        getAll: '/public/academic-years',\n        getById: (id) => `/academic-years/${id}`,\n        create: '/academic-years',\n        update: (id) => `/academic-years/${id}`,\n        delete: (id) => `/academic-years/${id}`,\n      },\n      dashboard: {\n        getStats: '/public/dashboard/stats',\n        getActivities: '/public/dashboard/activities',\n      },\n      batches: {\n        getAll: '/batches',\n        getById: (id) => `/batches/${id}`,\n        create: '/batches',\n        update: (id) => `/batches/${id}`,\n        delete: (id) => `/batches/${id}`,\n      },\n      auth: {\n        login: '/auth/login',\n        register: '/auth/register',\n        updatePassword: '/auth/update-password',\n      }\n    }\n  },\n  fastapi: {\n    baseURL: 'http://localhost:5000/api',  // FastAPI backend URL on port 5000\n    endpoints: {\n      students: {\n        getAll: '/students',\n        getById: (id) => `/students/${id}`,\n        create: '/students',\n        update: (id) => `/students/${id}`,\n        delete: (id) => `/students/${id}`,\n        getByProgram: (programId) => `/students/program/${programId}`,\n        getByParent: (parentId) => `/students/parent/${parentId}`,\n      },\n      programs: {\n        getAll: '/programs',\n        getById: (id) => `/programs/${id}`,\n        create: '/programs',\n        update: (id) => `/programs/${id}`,\n        delete: (id) => `/programs/${id}`,\n      },\n      batches: {\n        getAll: '/batches',\n        getById: (id) => `/batches/${id}`,\n        create: '/batches',\n        update: (id) => `/batches/${id}`,\n        delete: (id) => `/batches/${id}`,\n      },\n      auth: {\n        login: '/auth/login',\n        register: '/auth/register',\n        updatePassword: '/auth/update-password',\n      }\n    }\n  }\n};\n\n// Currently active backend (now using Node.js)\nconst activeBackend = 'nodejs';\n\n// Log the active backend configuration\nconsole.log(`Using ${activeBackend} backend at ${backends[activeBackend].baseURL}`);\n\n// Create axios instance with the active backend configuration\nconst apiClient = axios.create({\n  baseURL: backends[activeBackend].baseURL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include auth token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = getAuthToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle common errors\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle database connection errors\n    if (error.response?.data?.message?.includes('Too many connections') ||\n        error.message?.includes('Too many connections')) {\n      console.error('Database connection limit reached:', error.message);\n      // Create a custom error with more information\n      const customError = new Error('Too many connections to the database. Please try again later.');\n      customError.isConnectionError = true;\n      customError.originalError = error;\n      return Promise.reject(customError);\n    }\n    \n    // Handle authentication errors\n    if (error.response?.status === 401) {\n      console.error('Authentication error:', error.message);\n      // Create a custom error with more information\n      const customError = new Error('Your session has expired. Please log in again.');\n      customError.isAuthError = true;\n      customError.originalError = error;\n      return Promise.reject(customError);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Helper function to get the endpoint for the current backend\nconst getEndpoint = (service, action, ...params) => {\n  const endpoint = backends[activeBackend].endpoints[service][action];\n  if (typeof endpoint === 'function') {\n    return endpoint(...params);\n  }\n  return endpoint;\n};\n\n// API adapter service\nconst ApiAdapter = {\n  // Student endpoints\n  students: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('students', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('students', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (studentData) => {\n      const endpoint = getEndpoint('students', 'create');\n      \n      // Handle file uploads differently for FastAPI\n      if (activeBackend === 'fastapi' && studentData.profile_picture instanceof File) {\n        const formData = new FormData();\n        \n        // Add all student data to form data\n        Object.keys(studentData).forEach(key => {\n          if (key === 'profile_picture') {\n            formData.append('profile_picture', studentData.profile_picture);\n          } else {\n            formData.append(key, studentData[key]);\n          }\n        });\n        \n        const response = await apiClient.post(endpoint, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        return response.data;\n      } else {\n        // Regular JSON request for Node.js backend\n        const response = await apiClient.post(endpoint, studentData);\n        return response.data;\n      }\n    },\n    \n    update: async (id, studentData) => {\n      const endpoint = getEndpoint('students', 'update', id);\n      \n      // Handle file uploads differently for FastAPI\n      if (activeBackend === 'fastapi' && studentData.profile_picture instanceof File) {\n        const formData = new FormData();\n        \n        // Add all student data to form data\n        Object.keys(studentData).forEach(key => {\n          if (key === 'profile_picture') {\n            formData.append('profile_picture', studentData.profile_picture);\n          } else {\n            formData.append(key, studentData[key]);\n          }\n        });\n        \n        const response = await apiClient.put(endpoint, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        return response.data;\n      } else {\n        // Regular JSON request for Node.js backend\n        const response = await apiClient.put(endpoint, studentData);\n        return response.data;\n      }\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('students', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n    \n    getByProgram: async (programId, page = 1, limit = 10) => {\n      const endpoint = getEndpoint('students', 'getByProgram', programId);\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit }\n      });\n      return response.data;\n    },\n    \n    getByParent: async (parentId, page = 1, limit = 10) => {\n      const endpoint = getEndpoint('students', 'getByParent', parentId);\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit }\n      });\n      return response.data;\n    },\n  },\n  \n  // Program endpoints\n  programs: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('programs', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('programs', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (programData) => {\n      const endpoint = getEndpoint('programs', 'create');\n      const response = await apiClient.post(endpoint, programData);\n      return response.data;\n    },\n    \n    update: async (id, programData) => {\n      const endpoint = getEndpoint('programs', 'update', id);\n      const response = await apiClient.put(endpoint, programData);\n      return response.data;\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('programs', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n  },\n\n  // Department endpoints\n  departments: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('departments', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('departments', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (departmentData) => {\n      const endpoint = getEndpoint('departments', 'create');\n      const response = await apiClient.post(endpoint, departmentData);\n      return response.data;\n    },\n    \n    update: async (id, departmentData) => {\n      const endpoint = getEndpoint('departments', 'update', id);\n      const response = await apiClient.put(endpoint, departmentData);\n      return response.data;\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('departments', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n  },\n\n  // Major endpoints\n  majors: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('majors', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('majors', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (majorData) => {\n      const endpoint = getEndpoint('majors', 'create');\n      const response = await apiClient.post(endpoint, majorData);\n      return response.data;\n    },\n    \n    update: async (id, majorData) => {\n      const endpoint = getEndpoint('majors', 'update', id);\n      const response = await apiClient.put(endpoint, majorData);\n      return response.data;\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('majors', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n  },\n\n  // Subject endpoints\n  subjects: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('subjects', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('subjects', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (subjectData) => {\n      const endpoint = getEndpoint('subjects', 'create');\n      const response = await apiClient.post(endpoint, subjectData);\n      return response.data;\n    },\n    \n    update: async (id, subjectData) => {\n      const endpoint = getEndpoint('subjects', 'update', id);\n      const response = await apiClient.put(endpoint, subjectData);\n      return response.data;\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('subjects', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n  },\n\n  // Teacher endpoints\n  teachers: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('teachers', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('teachers', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (teacherData) => {\n      const endpoint = getEndpoint('teachers', 'create');\n      const response = await apiClient.post(endpoint, teacherData);\n      return response.data;\n    },\n    \n    update: async (id, teacherData) => {\n      const endpoint = getEndpoint('teachers', 'update', id);\n      const response = await apiClient.put(endpoint, teacherData);\n      return response.data;\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('teachers', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n  },\n\n  // Academic Year endpoints\n  academicYears: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('academicYears', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('academicYears', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (academicYearData) => {\n      const endpoint = getEndpoint('academicYears', 'create');\n      const response = await apiClient.post(endpoint, academicYearData);\n      return response.data;\n    },\n    \n    update: async (id, academicYearData) => {\n      const endpoint = getEndpoint('academicYears', 'update', id);\n      const response = await apiClient.put(endpoint, academicYearData);\n      return response.data;\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('academicYears', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n  },\n  \n  // Batch endpoints\n  batches: {\n    getAll: async (page = 1, limit = 10, search = '') => {\n      const endpoint = getEndpoint('batches', 'getAll');\n      const response = await apiClient.get(endpoint, {\n        params: { page, limit, search }\n      });\n      return response.data;\n    },\n    \n    getById: async (id) => {\n      const endpoint = getEndpoint('batches', 'getById', id);\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    },\n    \n    create: async (batchData) => {\n      const endpoint = getEndpoint('batches', 'create');\n      const response = await apiClient.post(endpoint, batchData);\n      return response.data;\n    },\n    \n    update: async (id, batchData) => {\n      const endpoint = getEndpoint('batches', 'update', id);\n      const response = await apiClient.put(endpoint, batchData);\n      return response.data;\n    },\n    \n    delete: async (id) => {\n      const endpoint = getEndpoint('batches', 'delete', id);\n      const response = await apiClient.delete(endpoint);\n      return response.data;\n    },\n  },\n  \n  // Auth endpoints\n  auth: {\n    login: async (credentials) => {\n      const endpoint = getEndpoint('auth', 'login');\n      console.log(`Sending login request to: ${backends[activeBackend].baseURL}${endpoint}`);\n      console.log('With credentials:', { username: credentials.username, password: '******' });\n      \n      try {\n        const response = await apiClient.post(endpoint, credentials);\n        console.log('Login response received:', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Login error:', error.message);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n        throw error;\n      }\n    },\n    \n    register: async (userData) => {\n      const endpoint = getEndpoint('auth', 'register');\n      const response = await apiClient.post(endpoint, userData);\n      return response.data;\n    },\n    \n    updatePassword: async (passwordData) => {\n      const endpoint = getEndpoint('auth', 'updatePassword');\n      const response = await apiClient.put(endpoint, passwordData);\n      return response.data;\n    },\n  },\n  \n  // Dashboard endpoints\n  dashboard: {\n    getStats: async () => {\n      const endpoint = '/dashboard/stats';\n      try {\n        const response = await apiClient.get(endpoint);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching dashboard stats:', error);\n        // Return mock data if API fails\n        return {\n          success: true,\n          data: {\n            students: {\n              total: 120,\n              active: 98,\n              inactive: 12,\n              graduated: 8,\n              suspended: 2\n            },\n            teachers: {\n              total: 25,\n              active: 22,\n              departments: 5\n            },\n            academics: {\n              programs: 8,\n              batches: 12,\n              departments: 5,\n              subjects: 45\n            },\n            attendance: {\n              today: 95,\n              present: 88,\n              absent: 5,\n              rate: 93\n            },\n            exams: {\n              upcoming: 3,\n              completed: 12,\n              ongoing: 1,\n              list: [\n                { name: 'Midterm Exam', subject: 'Computer Science', date: '2023-07-15', time: '09:00 AM', status: 'Scheduled' },\n                { name: 'Final Exam', subject: 'Mathematics', date: '2023-07-20', time: '10:30 AM', status: 'Scheduled' },\n                { name: 'Quiz', subject: 'English', date: '2023-07-12', time: '02:00 PM', status: 'Ongoing' }\n              ]\n            },\n            payments: {\n              total: 45000,\n              pending: 8500,\n              overdue: 3200,\n              thisMonth: 12500\n            },\n            users: {\n              total: 180,\n              active: 165,\n              roles: {\n                admin: 5,\n                teacher: 25,\n                student: 120,\n                parent: 30\n              }\n            },\n            recentActivity: [\n              { title: 'New Student Registered', description: 'John Doe registered as a new student', time: '10 minutes ago' },\n              { title: 'Payment Received', description: 'Payment of $500 received from Sarah Johnson', time: '1 hour ago' },\n              { title: 'Exam Results Published', description: 'Results for Computer Science midterm published', time: '3 hours ago' },\n              { title: 'Attendance Marked', description: 'Attendance for Batch CS-2023 marked by Prof. Smith', time: '5 hours ago' },\n              { title: 'New Course Added', description: 'Advanced Database Systems added to curriculum', time: '1 day ago' }\n            ]\n          }\n        };\n      }\n    },\n    \n    getRecentActivity: async (limit = 10) => {\n      const endpoint = '/dashboard/recent-activity';\n      try {\n        const response = await apiClient.get(endpoint, { params: { limit } });\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching recent activity:', error);\n        return {\n          success: true,\n          data: [\n            { title: 'New Student Registered', description: 'John Doe registered as a new student', time: '10 minutes ago' },\n            { title: 'Payment Received', description: 'Payment of $500 received from Sarah Johnson', time: '1 hour ago' },\n            { title: 'Exam Results Published', description: 'Results for Computer Science midterm published', time: '3 hours ago' },\n            { title: 'Attendance Marked', description: 'Attendance for Batch CS-2023 marked by Prof. Smith', time: '5 hours ago' },\n            { title: 'New Course Added', description: 'Advanced Database Systems added to curriculum', time: '1 day ago' }\n          ]\n        };\n      }\n    },\n    \n    getUpcomingExams: async (limit = 5) => {\n      const endpoint = '/dashboard/upcoming-exams';\n      try {\n        const response = await apiClient.get(endpoint, { params: { limit } });\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching upcoming exams:', error);\n        return {\n          success: true,\n          data: [\n            { name: 'Midterm Exam', subject: 'Computer Science', date: '2023-07-15', time: '09:00 AM', status: 'Scheduled' },\n            { name: 'Final Exam', subject: 'Mathematics', date: '2023-07-20', time: '10:30 AM', status: 'Scheduled' },\n            { name: 'Quiz', subject: 'English', date: '2023-07-12', time: '02:00 PM', status: 'Ongoing' }\n          ]\n        };\n      }\n    }\n  },\n};\n\nexport default ApiAdapter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}