{"ast":null,"code":"import ApiAdapter from './api-adapter';\nimport SMSDBDataFetcher from './smsdb-data-fetcher';\nimport axios from 'axios';\nconst DEPARTMENT_URL = '/departments';\nconst PUBLIC_DEPARTMENT_URL = '/public/departments';\nconst DIRECT_API_URL = 'http://localhost:5000/api';\nconst DepartmentService = {\n  getAll: async (page = 1, limit = 10, search = '') => {\n    try {\n      // Use new unified data fetcher for smsdb\n      console.log('Fetching departments from smsdb...');\n      const result = await SMSDBDataFetcher.getDepartments(page, limit, search);\n      if (result.success) {\n        return result;\n      }\n\n      // Fallback to original method\n      console.log('Falling back to original department fetching...');\n      // First try with the public endpoint\n      try {\n        console.log('Trying public departments endpoint');\n        const publicResponse = await axios.get(`${DIRECT_API_URL}${PUBLIC_DEPARTMENT_URL}?page=${page}&limit=${limit}&search=${search}`);\n        if (publicResponse.data && publicResponse.data.data) {\n          console.log('Public departments endpoint succeeded');\n          return {\n            rows: publicResponse.data.data || [],\n            count: publicResponse.data.total || 0\n          };\n        }\n      } catch (publicError) {\n        console.log('Public departments endpoint failed, trying authenticated endpoint');\n      }\n\n      // Then try with the api instance (authenticated)\n      const response = await api.get(`${DEPARTMENT_URL}?page=${page}&limit=${limit}&search=${search}`);\n      // Handle different response formats (Node.js vs FastAPI)\n      if (response.data && response.data.data) {\n        // FastAPI format with data property\n        return {\n          rows: response.data.data || [],\n          count: response.data.total || 0\n        };\n      } else if (response.data && Array.isArray(response.data.rows)) {\n        // Node.js format with rows property\n        return response.data;\n      } else if (Array.isArray(response.data)) {\n        // Simple array format\n        return {\n          rows: response.data,\n          count: response.data.length\n        };\n      }\n      // Default empty response\n      return {\n        rows: [],\n        count: 0\n      };\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      // Fallback to direct call with correct port\n      const token = localStorage.getItem('token');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      try {\n        const response = await axios.get(`${DIRECT_API_URL}${DEPARTMENT_URL}?page=${page}&limit=${limit}&search=${search}`, {\n          headers\n        });\n\n        // Process the response the same way\n        if (response.data && response.data.data) {\n          return {\n            rows: response.data.data || [],\n            count: response.data.total || 0\n          };\n        } else if (response.data && Array.isArray(response.data.rows)) {\n          return response.data;\n        } else if (Array.isArray(response.data)) {\n          return {\n            rows: response.data,\n            count: response.data.length\n          };\n        }\n        return {\n          rows: [],\n          count: 0\n        };\n      } catch (fallbackError) {\n        console.error('All API calls failed:', fallbackError);\n        return {\n          rows: [],\n          count: 0\n        };\n      }\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`${DEPARTMENT_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      const response = await axios.get(`${DIRECT_API_URL}${DEPARTMENT_URL}/${id}`, {\n        headers\n      });\n      return response.data;\n    }\n  },\n  create: async departmentData => {\n    try {\n      const response = await api.post(DEPARTMENT_URL, departmentData);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      const response = await axios.post(`${DIRECT_API_URL}${DEPARTMENT_URL}`, departmentData, {\n        headers\n      });\n      return response.data;\n    }\n  },\n  update: async (id, departmentData) => {\n    try {\n      const response = await api.put(`${DEPARTMENT_URL}/${id}`, departmentData);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      const response = await axios.put(`${DIRECT_API_URL}${DEPARTMENT_URL}/${id}`, departmentData, {\n        headers\n      });\n      return response.data;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`${DEPARTMENT_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      const response = await axios.delete(`${DIRECT_API_URL}${DEPARTMENT_URL}/${id}`, {\n        headers\n      });\n      return response.data;\n    }\n  }\n};\nexport default DepartmentService;","map":{"version":3,"names":["ApiAdapter","SMSDBDataFetcher","axios","DEPARTMENT_URL","PUBLIC_DEPARTMENT_URL","DIRECT_API_URL","DepartmentService","getAll","page","limit","search","console","log","result","getDepartments","success","publicResponse","get","data","rows","count","total","publicError","response","api","Array","isArray","length","error","token","localStorage","getItem","headers","Authorization","fallbackError","getById","id","create","departmentData","post","update","put","delete"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/department.service.js"],"sourcesContent":["import ApiAdapter from './api-adapter';\nimport SMSDBDataFetcher from './smsdb-data-fetcher';\nimport axios from 'axios';\n\nconst DEPARTMENT_URL = '/departments';\nconst PUBLIC_DEPARTMENT_URL = '/public/departments';\nconst DIRECT_API_URL = 'http://localhost:5000/api';\n\nconst DepartmentService = {\n  getAll: async (page = 1, limit = 10, search = '') => {\n    try {\n      // Use new unified data fetcher for smsdb\n      console.log('Fetching departments from smsdb...');\n      const result = await SMSDBDataFetcher.getDepartments(page, limit, search);\n      \n      if (result.success) {\n        return result;\n      }\n      \n      // Fallback to original method\n      console.log('Falling back to original department fetching...');\n      // First try with the public endpoint\n      try {\n        console.log('Trying public departments endpoint');\n        const publicResponse = await axios.get(`${DIRECT_API_URL}${PUBLIC_DEPARTMENT_URL}?page=${page}&limit=${limit}&search=${search}`);\n        \n        if (publicResponse.data && publicResponse.data.data) {\n          console.log('Public departments endpoint succeeded');\n          return {\n            rows: publicResponse.data.data || [],\n            count: publicResponse.data.total || 0\n          };\n        }\n      } catch (publicError) {\n        console.log('Public departments endpoint failed, trying authenticated endpoint');\n      }\n      \n      // Then try with the api instance (authenticated)\n      const response = await api.get(`${DEPARTMENT_URL}?page=${page}&limit=${limit}&search=${search}`);\n      // Handle different response formats (Node.js vs FastAPI)\n      if (response.data && response.data.data) {\n        // FastAPI format with data property\n        return {\n          rows: response.data.data || [],\n          count: response.data.total || 0\n        };\n      } else if (response.data && Array.isArray(response.data.rows)) {\n        // Node.js format with rows property\n        return response.data;\n      } else if (Array.isArray(response.data)) {\n        // Simple array format\n        return {\n          rows: response.data,\n          count: response.data.length\n        };\n      }\n      // Default empty response\n      return { rows: [], count: 0 };\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      // Fallback to direct call with correct port\n      const token = localStorage.getItem('token');\n      const headers = token ? { Authorization: `Bearer ${token}` } : {};\n      \n      try {\n        const response = await axios.get(`${DIRECT_API_URL}${DEPARTMENT_URL}?page=${page}&limit=${limit}&search=${search}`, {\n          headers\n        });\n        \n        // Process the response the same way\n        if (response.data && response.data.data) {\n          return {\n            rows: response.data.data || [],\n            count: response.data.total || 0\n          };\n        } else if (response.data && Array.isArray(response.data.rows)) {\n          return response.data;\n        } else if (Array.isArray(response.data)) {\n          return {\n            rows: response.data,\n            count: response.data.length\n          };\n        }\n        return { rows: [], count: 0 };\n      } catch (fallbackError) {\n        console.error('All API calls failed:', fallbackError);\n        return { rows: [], count: 0 };\n      }\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`${DEPARTMENT_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? { Authorization: `Bearer ${token}` } : {};\n      \n      const response = await axios.get(`${DIRECT_API_URL}${DEPARTMENT_URL}/${id}`, { headers });\n      return response.data;\n    }\n  },\n\n  create: async (departmentData) => {\n    try {\n      const response = await api.post(DEPARTMENT_URL, departmentData);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? { Authorization: `Bearer ${token}` } : {};\n      \n      const response = await axios.post(`${DIRECT_API_URL}${DEPARTMENT_URL}`, departmentData, { headers });\n      return response.data;\n    }\n  },\n\n  update: async (id, departmentData) => {\n    try {\n      const response = await api.put(`${DEPARTMENT_URL}/${id}`, departmentData);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? { Authorization: `Bearer ${token}` } : {};\n      \n      const response = await axios.put(`${DIRECT_API_URL}${DEPARTMENT_URL}/${id}`, departmentData, { headers });\n      return response.data;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`${DEPARTMENT_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.log('Falling back to direct API call with port 5000');\n      const token = localStorage.getItem('token');\n      const headers = token ? { Authorization: `Bearer ${token}` } : {};\n      \n      const response = await axios.delete(`${DIRECT_API_URL}${DEPARTMENT_URL}/${id}`, { headers });\n      return response.data;\n    }\n  }\n};\n\nexport default DepartmentService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}