{"ast":null,"code":"import api from './api';\nconst MANAGE_SUBJECT_URL = '/manage-subjects';\nconst ManageSubjectService = {\n  getAll: async (page = 1, limit = 10, search = '', academicYearId = '', majorId = '') => {\n    try {\n      let url = `${MANAGE_SUBJECT_URL}?page=${page}&limit=${limit}&search=${search}`;\n      if (academicYearId) {\n        url += `&academicYearId=${academicYearId}`;\n      }\n      if (majorId) {\n        url += `&majorId=${majorId}`;\n      }\n\n      // Try authenticated endpoint first\n      try {\n        const response = await api.get(url);\n        return response.data;\n      } catch (authError) {\n        console.log('Authenticated manage-subjects endpoint failed, trying public endpoint');\n        try {\n          // Fallback to public endpoint\n          const publicResponse = await api.get(`${MANAGE_SUBJECT_URL}/public${url.substring(url.indexOf('?'))}`);\n          return publicResponse.data;\n        } catch (publicError) {\n          console.log('Public endpoint also failed, trying PHP fallback');\n          // Final fallback to PHP endpoint\n          const phpResponse = await fetch(`http://localhost/sms-spi/sms-spi/api/manage-subjects/public.php${url.substring(url.indexOf('?'))}`);\n          const phpData = await phpResponse.json();\n          return phpData;\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching subject assignments:', error);\n      throw error;\n    }\n  },\n  getById: async id => {\n    const response = await api.get(`${MANAGE_SUBJECT_URL}/${id}`);\n    return response.data;\n  },\n  create: async manageSubjectData => {\n    const response = await api.post(MANAGE_SUBJECT_URL, manageSubjectData);\n    return response.data;\n  },\n  update: async (id, manageSubjectData) => {\n    const response = await api.put(`${MANAGE_SUBJECT_URL}/${id}`, manageSubjectData);\n    return response.data;\n  },\n  delete: async id => {\n    const response = await api.delete(`${MANAGE_SUBJECT_URL}/${id}`);\n    return response.data;\n  },\n  getByMajor: async (majorId, academicYearId) => {\n    let url = `${MANAGE_SUBJECT_URL}/major/${majorId}`;\n    if (academicYearId) {\n      url += `?academicYearId=${academicYearId}`;\n    }\n    const response = await api.get(url);\n    return response.data;\n  },\n  getByTeacher: async (teacherId, academicYearId) => {\n    let url = `${MANAGE_SUBJECT_URL}/teacher/${teacherId}`;\n    if (academicYearId) {\n      url += `?academicYearId=${academicYearId}`;\n    }\n    const response = await api.get(url);\n    return response.data;\n  }\n};\nexport default ManageSubjectService;","map":{"version":3,"names":["api","MANAGE_SUBJECT_URL","ManageSubjectService","getAll","page","limit","search","academicYearId","majorId","url","response","get","data","authError","console","log","publicResponse","substring","indexOf","publicError","phpResponse","fetch","phpData","json","error","getById","id","create","manageSubjectData","post","update","put","delete","getByMajor","getByTeacher","teacherId"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/manageSubject.service.js"],"sourcesContent":["import api from './api';\n\nconst MANAGE_SUBJECT_URL = '/manage-subjects';\n\nconst ManageSubjectService = {\n  getAll: async (page = 1, limit = 10, search = '', academicYearId = '', majorId = '') => {\n    try {\n      let url = `${MANAGE_SUBJECT_URL}?page=${page}&limit=${limit}&search=${search}`;\n      if (academicYearId) {\n        url += `&academicYearId=${academicYearId}`;\n      }\n      if (majorId) {\n        url += `&majorId=${majorId}`;\n      }\n      \n      // Try authenticated endpoint first\n      try {\n        const response = await api.get(url);\n        return response.data;\n      } catch (authError) {\n        console.log('Authenticated manage-subjects endpoint failed, trying public endpoint');\n        try {\n          // Fallback to public endpoint\n          const publicResponse = await api.get(`${MANAGE_SUBJECT_URL}/public${url.substring(url.indexOf('?'))}`);\n          return publicResponse.data;\n        } catch (publicError) {\n          console.log('Public endpoint also failed, trying PHP fallback');\n          // Final fallback to PHP endpoint\n          const phpResponse = await fetch(`http://localhost/sms-spi/sms-spi/api/manage-subjects/public.php${url.substring(url.indexOf('?'))}`);\n          const phpData = await phpResponse.json();\n          return phpData;\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching subject assignments:', error);\n      throw error;\n    }\n  },\n\n  getById: async (id) => {\n    const response = await api.get(`${MANAGE_SUBJECT_URL}/${id}`);\n    return response.data;\n  },\n\n  create: async (manageSubjectData) => {\n    const response = await api.post(MANAGE_SUBJECT_URL, manageSubjectData);\n    return response.data;\n  },\n\n  update: async (id, manageSubjectData) => {\n    const response = await api.put(`${MANAGE_SUBJECT_URL}/${id}`, manageSubjectData);\n    return response.data;\n  },\n\n  delete: async (id) => {\n    const response = await api.delete(`${MANAGE_SUBJECT_URL}/${id}`);\n    return response.data;\n  },\n\n  getByMajor: async (majorId, academicYearId) => {\n    let url = `${MANAGE_SUBJECT_URL}/major/${majorId}`;\n    if (academicYearId) {\n      url += `?academicYearId=${academicYearId}`;\n    }\n    const response = await api.get(url);\n    return response.data;\n  },\n\n  getByTeacher: async (teacherId, academicYearId) => {\n    let url = `${MANAGE_SUBJECT_URL}/teacher/${teacherId}`;\n    if (academicYearId) {\n      url += `?academicYearId=${academicYearId}`;\n    }\n    const response = await api.get(url);\n    return response.data;\n  }\n};\n\nexport default ManageSubjectService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}