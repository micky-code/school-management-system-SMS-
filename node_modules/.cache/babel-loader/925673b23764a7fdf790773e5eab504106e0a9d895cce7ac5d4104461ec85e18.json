{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\sms-frontend-clone\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport ApiAdapter from '../services/api-adapter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    const userStr = localStorage.getItem('user');\n\n    // Define valid roles in the system\n    const validRoles = ['admin', 'teacher', 'student', 'parent'];\n    if (token && userStr) {\n      try {\n        // First try to get user from localStorage\n        const userData = JSON.parse(userStr);\n\n        // Set axios default header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        try {\n          // Then validate token\n          const decoded = jwtDecode(token);\n\n          // Check if token is expired\n          const currentTime = Date.now() / 1000;\n          if (decoded.exp < currentTime) {\n            console.log('Token expired in AuthContext');\n            // Token is expired, clear auth data\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            delete axios.defaults.headers.common['Authorization'];\n            setCurrentUser(null);\n          } else {\n            // Merge user data with token data\n            // Ensure role is one of the valid roles, default to admin if not\n            let userRole = (decoded.role || userData.role || '').toLowerCase();\n            if (!validRoles.includes(userRole)) {\n              console.log(`Invalid role detected: ${userRole}, defaulting to admin`);\n              userRole = 'admin';\n            }\n            const updatedUser = {\n              ...userData,\n              // Use normalized role\n              role: userRole,\n              // Add validation timestamp\n              _validated: Date.now()\n            };\n\n            // Update localStorage with the merged data\n            localStorage.setItem('user', JSON.stringify(updatedUser));\n\n            // Update current user state\n            setCurrentUser(updatedUser);\n            console.log('User session restored from localStorage');\n          }\n        } catch (error) {\n          // If token decode fails, still use the user data\n          console.warn('Token decode failed, using stored user data:', error);\n          setCurrentUser(userData);\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n        // Clear invalid data\n        localStorage.removeItem('user');\n        setCurrentUser(null);\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // Remove any existing tokens/user data first\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      delete axios.defaults.headers.common['Authorization'];\n      console.log('Attempting login with:', {\n        username\n      });\n\n      // Use ApiAdapter for better compatibility with both backends\n      const response = await ApiAdapter.auth.login({\n        username,\n        password\n      });\n      console.log('Login response:', response);\n\n      // Extract token and user data based on the response structure\n      // FastAPI returns { access_token, token_type, user }\n      // Node.js returns { token, user }\n      const token = response.access_token || response.token;\n      const user = response.user;\n      console.log('Extracted token:', token ? 'Token exists' : 'No token');\n      console.log('Extracted user:', user);\n      if (!token || !user) {\n        throw new Error('Invalid response from server. Missing token or user data.');\n      }\n\n      // Ensure user has a role, default to 'admin' if missing\n      // Use 'admin' as default instead of 'user' since 'user' is not a valid role in the system\n      // Valid roles are: admin, teacher, student, parent\n      const validRoles = ['admin', 'teacher', 'student', 'parent'];\n\n      // Get role from user data and normalize it\n      let userRole = (user.role || '').toLowerCase();\n\n      // If role is not valid, default to admin\n      if (!validRoles.includes(userRole)) {\n        console.log(`Invalid role detected during login: ${userRole}, defaulting to admin`);\n        userRole = 'admin';\n      }\n      const normalizedUser = {\n        ...user,\n        role: userRole,\n        // Use the validated role\n        _validated: Date.now() // Add validation timestamp\n      };\n      console.log('Normalized user:', normalizedUser);\n\n      // Set axios default header first to ensure API calls work immediately\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      console.log('Authorization header set in axios');\n\n      // Save token to local storage\n      localStorage.setItem('token', token);\n      console.log('Token saved to localStorage');\n\n      // Reset any auth attempts\n      sessionStorage.removeItem('auth_attempts');\n      sessionStorage.removeItem('redirectUrl'); // Clear any saved redirect URLs\n\n      // Save user data to local storage\n      localStorage.setItem('user', JSON.stringify(normalizedUser));\n      console.log('User data saved to localStorage');\n\n      // Update current user state - this will trigger the useEffect in Login component\n      setCurrentUser(normalizedUser);\n      console.log('Current user state updated');\n      setLoading(false);\n      return normalizedUser;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error.message || 'Failed to login');\n      setLoading(false);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    sessionStorage.removeItem('auth_attempts');\n    delete axios.defaults.headers.common['Authorization'];\n    setCurrentUser(null);\n  };\n  const register = async userData => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // Use ApiAdapter for better compatibility with both backends\n      const response = await ApiAdapter.auth.register(userData);\n      return response;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred during registration. Please try again.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // Use ApiAdapter for better compatibility with both backends\n      // Add this method to ApiAdapter if it doesn't exist yet\n      if (ApiAdapter.auth.updatePassword) {\n        const response = await ApiAdapter.auth.updatePassword({\n          currentPassword,\n          newPassword\n        });\n        return response;\n      } else {\n        // Fallback to direct API call if not implemented in adapter yet\n        const response = await axios.put('http://localhost:5000/api/auth/update-password', {\n          currentPassword,\n          newPassword\n        });\n        return response.data;\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'An error occurred while updating password. Please try again.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetPassword = async username => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await axios.post('http://localhost:5000/api/auth/reset-password', {\n        username\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'An error occurred while resetting password. Please try again.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    updatePassword,\n    resetPassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","jwtDecode","ApiAdapter","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","error","setError","token","localStorage","getItem","userStr","validRoles","userData","JSON","parse","defaults","headers","common","decoded","currentTime","Date","now","exp","console","log","removeItem","userRole","role","toLowerCase","includes","updatedUser","_validated","setItem","stringify","warn","login","username","password","response","auth","access_token","user","Error","normalizedUser","sessionStorage","message","logout","register","_error$response","_error$response$data","data","updatePassword","currentPassword","newPassword","put","_error$response2","_error$response2$data","resetPassword","post","_error$response3","_error$response3$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport ApiAdapter from '../services/api-adapter';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    const userStr = localStorage.getItem('user');\n    \n    // Define valid roles in the system\n    const validRoles = ['admin', 'teacher', 'student', 'parent'];\n    \n    if (token && userStr) {\n      try {\n        // First try to get user from localStorage\n        const userData = JSON.parse(userStr);\n        \n        // Set axios default header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        \n        try {\n          // Then validate token\n          const decoded = jwtDecode(token);\n          \n          // Check if token is expired\n          const currentTime = Date.now() / 1000;\n          if (decoded.exp < currentTime) {\n            console.log('Token expired in AuthContext');\n            // Token is expired, clear auth data\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            delete axios.defaults.headers.common['Authorization'];\n            setCurrentUser(null);\n          } else {\n            // Merge user data with token data\n            // Ensure role is one of the valid roles, default to admin if not\n            let userRole = (decoded.role || userData.role || '').toLowerCase();\n            if (!validRoles.includes(userRole)) {\n              console.log(`Invalid role detected: ${userRole}, defaulting to admin`);\n              userRole = 'admin';\n            }\n            \n            const updatedUser = {\n              ...userData,\n              // Use normalized role\n              role: userRole,\n              // Add validation timestamp\n              _validated: Date.now()\n            };\n            \n            // Update localStorage with the merged data\n            localStorage.setItem('user', JSON.stringify(updatedUser));\n            \n            // Update current user state\n            setCurrentUser(updatedUser);\n            console.log('User session restored from localStorage');\n          }\n        } catch (error) {\n          // If token decode fails, still use the user data\n          console.warn('Token decode failed, using stored user data:', error);\n          setCurrentUser(userData);\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n        // Clear invalid data\n        localStorage.removeItem('user');\n        setCurrentUser(null);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      // Remove any existing tokens/user data first\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      delete axios.defaults.headers.common['Authorization'];\n      \n      console.log('Attempting login with:', { username });\n      \n      // Use ApiAdapter for better compatibility with both backends\n      const response = await ApiAdapter.auth.login({ username, password });\n      \n      console.log('Login response:', response);\n      \n      // Extract token and user data based on the response structure\n      // FastAPI returns { access_token, token_type, user }\n      // Node.js returns { token, user }\n      const token = response.access_token || response.token;\n      const user = response.user;\n      \n      console.log('Extracted token:', token ? 'Token exists' : 'No token');\n      console.log('Extracted user:', user);\n      \n      if (!token || !user) {\n        throw new Error('Invalid response from server. Missing token or user data.');\n      }\n      \n      // Ensure user has a role, default to 'admin' if missing\n      // Use 'admin' as default instead of 'user' since 'user' is not a valid role in the system\n      // Valid roles are: admin, teacher, student, parent\n      const validRoles = ['admin', 'teacher', 'student', 'parent'];\n      \n      // Get role from user data and normalize it\n      let userRole = (user.role || '').toLowerCase();\n      \n      // If role is not valid, default to admin\n      if (!validRoles.includes(userRole)) {\n        console.log(`Invalid role detected during login: ${userRole}, defaulting to admin`);\n        userRole = 'admin';\n      }\n      \n      const normalizedUser = {\n        ...user,\n        role: userRole, // Use the validated role\n        _validated: Date.now() // Add validation timestamp\n      };\n      \n      console.log('Normalized user:', normalizedUser);\n      \n      // Set axios default header first to ensure API calls work immediately\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      console.log('Authorization header set in axios');\n      \n      // Save token to local storage\n      localStorage.setItem('token', token);\n      console.log('Token saved to localStorage');\n      \n      // Reset any auth attempts\n      sessionStorage.removeItem('auth_attempts');\n      sessionStorage.removeItem('redirectUrl'); // Clear any saved redirect URLs\n      \n      // Save user data to local storage\n      localStorage.setItem('user', JSON.stringify(normalizedUser));\n      console.log('User data saved to localStorage');\n      \n      // Update current user state - this will trigger the useEffect in Login component\n      setCurrentUser(normalizedUser);\n      console.log('Current user state updated');\n      \n      setLoading(false);\n      return normalizedUser;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error.message || 'Failed to login');\n      setLoading(false);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    sessionStorage.removeItem('auth_attempts');\n    delete axios.defaults.headers.common['Authorization'];\n    setCurrentUser(null);\n  };\n\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      // Use ApiAdapter for better compatibility with both backends\n      const response = await ApiAdapter.auth.register(userData);\n      \n      return response;\n    } catch (error) {\n      setError(\n        error.response?.data?.message || \n        'An error occurred during registration. Please try again.'\n      );\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      // Use ApiAdapter for better compatibility with both backends\n      // Add this method to ApiAdapter if it doesn't exist yet\n      if (ApiAdapter.auth.updatePassword) {\n        const response = await ApiAdapter.auth.updatePassword({\n          currentPassword,\n          newPassword\n        });\n        return response;\n      } else {\n        // Fallback to direct API call if not implemented in adapter yet\n        const response = await axios.put('http://localhost:5000/api/auth/update-password', {\n          currentPassword,\n          newPassword\n        });\n        return response.data;\n      }\n    } catch (error) {\n      setError(\n        error.response?.data?.message || \n        'An error occurred while updating password. Please try again.'\n      );\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (username) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      const response = await axios.post('http://localhost:5000/api/auth/reset-password', {\n        username\n      });\n      \n      return response.data;\n    } catch (error) {\n      setError(\n        error.response?.data?.message || \n        'An error occurred while resetting password. Please try again.'\n      );\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    updatePassword,\n    resetPassword\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}