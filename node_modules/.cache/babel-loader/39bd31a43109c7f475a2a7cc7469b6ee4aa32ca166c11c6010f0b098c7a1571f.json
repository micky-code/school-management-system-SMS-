{"ast":null,"code":"import api from './api';\nconst CourseEnrollmentService = {\n  // Get all course enrollments with pagination and filters\n  getAll: async (page = 1, limit = 10, search = '', courseId = '', academicYearId = '', status = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(search && {\n          search\n        }),\n        ...(courseId && {\n          course_id: courseId\n        }),\n        ...(academicYearId && {\n          academic_year_id: academicYearId\n        }),\n        ...(status && {\n          status\n        })\n      });\n      const response = await api.get(`/course-enrollments?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course enrollments:', error);\n      throw error;\n    }\n  },\n  // Get course enrollment by ID\n  getById: async id => {\n    try {\n      const response = await api.get(`/course-enrollments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course enrollment:', error);\n      throw error;\n    }\n  },\n  // Get enrollments by student ID\n  getByStudentId: async (studentId, page = 1, limit = 10, academicYearId = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(academicYearId && {\n          academic_year_id: academicYearId\n        })\n      });\n      const response = await api.get(`/course-enrollments/student/${studentId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching student enrollments:', error);\n      throw error;\n    }\n  },\n  // Get enrollments by course ID\n  getByCourseId: async (courseId, page = 1, limit = 10, status = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(status && {\n          status\n        })\n      });\n      const response = await api.get(`/course-enrollments/course/${courseId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course enrollments:', error);\n      throw error;\n    }\n  },\n  // Get enrollments by subject ID (used in Teacher Subjects page)\n  getBySubjectId: async (subjectId, page = 1, limit = 10, status = '', search = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(status && {\n          status\n        }),\n        ...(search && {\n          search\n        })\n      });\n      const response = await api.get(`/course-enrollments/subject/${subjectId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching subject enrollments:', error);\n      throw error;\n    }\n  },\n  // Get enrollments for subjects taught by a specific teacher\n  getByTeacherId: async (teacherId, academicYearId = '', page = 1, limit = 10) => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(academicYearId && {\n          academic_year_id: academicYearId\n        })\n      });\n      const response = await api.get(`/course-enrollments/teacher/${teacherId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching teacher\\'s course enrollments:', error);\n      throw error;\n    }\n  },\n  // Create new course enrollment\n  create: async enrollmentData => {\n    try {\n      const response = await api.post('/course-enrollments', enrollmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating course enrollment:', error);\n      throw error;\n    }\n  },\n  // Update course enrollment\n  update: async (id, enrollmentData) => {\n    try {\n      const response = await api.put(`/course-enrollments/${id}`, enrollmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating course enrollment:', error);\n      throw error;\n    }\n  },\n  // Delete course enrollment\n  delete: async id => {\n    try {\n      const response = await api.delete(`/course-enrollments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting course enrollment:', error);\n      throw error;\n    }\n  },\n  // Bulk enroll students in a course\n  bulkEnroll: async (courseId, studentIds, academicYearId) => {\n    try {\n      const response = await api.post('/course-enrollments/bulk', {\n        course_id: courseId,\n        student_ids: studentIds,\n        academic_year_id: academicYearId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error bulk enrolling students:', error);\n      throw error;\n    }\n  },\n  // Update enrollment status\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.patch(`/course-enrollments/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating enrollment status:', error);\n      throw error;\n    }\n  },\n  // Get enrollment statistics\n  getStatistics: async (academicYearId = '', courseId = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(academicYearId && {\n          academic_year_id: academicYearId\n        }),\n        ...(courseId && {\n          course_id: courseId\n        })\n      });\n      const response = await api.get(`/course-enrollments/statistics?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching enrollment statistics:', error);\n      throw error;\n    }\n  }\n};\nexport default CourseEnrollmentService;","map":{"version":3,"names":["api","CourseEnrollmentService","getAll","page","limit","search","courseId","academicYearId","status","params","URLSearchParams","toString","course_id","academic_year_id","response","get","data","error","console","getById","id","getByStudentId","studentId","getByCourseId","getBySubjectId","subjectId","getByTeacherId","teacherId","create","enrollmentData","post","update","put","delete","bulkEnroll","studentIds","student_ids","updateStatus","patch","getStatistics"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/courseEnrollment.service.js"],"sourcesContent":["import api from './api';\n\nconst CourseEnrollmentService = {\n  // Get all course enrollments with pagination and filters\n  getAll: async (page = 1, limit = 10, search = '', courseId = '', academicYearId = '', status = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(search && { search }),\n        ...(courseId && { course_id: courseId }),\n        ...(academicYearId && { academic_year_id: academicYearId }),\n        ...(status && { status })\n      });\n\n      const response = await api.get(`/course-enrollments?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course enrollments:', error);\n      throw error;\n    }\n  },\n\n  // Get course enrollment by ID\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/course-enrollments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course enrollment:', error);\n      throw error;\n    }\n  },\n\n  // Get enrollments by student ID\n  getByStudentId: async (studentId, page = 1, limit = 10, academicYearId = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(academicYearId && { academic_year_id: academicYearId })\n      });\n      \n      const response = await api.get(`/course-enrollments/student/${studentId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching student enrollments:', error);\n      throw error;\n    }\n  },\n\n  // Get enrollments by course ID\n  getByCourseId: async (courseId, page = 1, limit = 10, status = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(status && { status })\n      });\n      \n      const response = await api.get(`/course-enrollments/course/${courseId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course enrollments:', error);\n      throw error;\n    }\n  },\n  \n  // Get enrollments by subject ID (used in Teacher Subjects page)\n  getBySubjectId: async (subjectId, page = 1, limit = 10, status = '', search = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(status && { status }),\n        ...(search && { search })\n      });\n      \n      const response = await api.get(`/course-enrollments/subject/${subjectId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching subject enrollments:', error);\n      throw error;\n    }\n  },\n  \n  // Get enrollments for subjects taught by a specific teacher\n  getByTeacherId: async (teacherId, academicYearId = '', page = 1, limit = 10) => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(academicYearId && { academic_year_id: academicYearId })\n      });\n      \n      const response = await api.get(`/course-enrollments/teacher/${teacherId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching teacher\\'s course enrollments:', error);\n      throw error;\n    }\n  },\n\n  // Create new course enrollment\n  create: async (enrollmentData) => {\n    try {\n      const response = await api.post('/course-enrollments', enrollmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating course enrollment:', error);\n      throw error;\n    }\n  },\n\n  // Update course enrollment\n  update: async (id, enrollmentData) => {\n    try {\n      const response = await api.put(`/course-enrollments/${id}`, enrollmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating course enrollment:', error);\n      throw error;\n    }\n  },\n\n  // Delete course enrollment\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/course-enrollments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting course enrollment:', error);\n      throw error;\n    }\n  },\n\n  // Bulk enroll students in a course\n  bulkEnroll: async (courseId, studentIds, academicYearId) => {\n    try {\n      const response = await api.post('/course-enrollments/bulk', {\n        course_id: courseId,\n        student_ids: studentIds,\n        academic_year_id: academicYearId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error bulk enrolling students:', error);\n      throw error;\n    }\n  },\n\n  // Update enrollment status\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.patch(`/course-enrollments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating enrollment status:', error);\n      throw error;\n    }\n  },\n\n  // Get enrollment statistics\n  getStatistics: async (academicYearId = '', courseId = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(academicYearId && { academic_year_id: academicYearId }),\n        ...(courseId && { course_id: courseId })\n      });\n\n      const response = await api.get(`/course-enrollments/statistics?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching enrollment statistics:', error);\n      throw error;\n    }\n  }\n};\n\nexport default CourseEnrollmentService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}