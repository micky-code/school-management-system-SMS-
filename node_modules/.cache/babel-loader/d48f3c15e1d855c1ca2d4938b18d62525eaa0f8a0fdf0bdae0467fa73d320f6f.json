{"ast":null,"code":"import ApiAdapter from './api-adapter';\n\n// Keep the original api import for backward compatibility during transition\nimport api from './api';\nconst PROGRAM_URL = '/programs';\nconst ProgramService = {\n  // Basic CRUD operations with error handling\n  getAll: async (page = 1, limit = 10, search = '', departmentId = '', degreeLevelId = '') => {\n    try {\n      // Use ApiAdapter for better compatibility with both backends\n      return await ApiAdapter.programs.getAll(page, limit, search);\n    } catch (error) {\n      console.error('Error fetching programs:', error);\n      // Return a default structure to prevent UI crashes\n      return {\n        success: false,\n        count: 0,\n        totalPages: 1,\n        currentPage: page,\n        data: [],\n        error: error.message || 'Failed to fetch programs'\n      };\n    }\n  },\n  getById: async id => {\n    try {\n      return await ApiAdapter.programs.getById(id);\n    } catch (error) {\n      console.error('Error fetching program:', error);\n      throw error;\n    }\n  },\n  create: async programData => {\n    try {\n      return await ApiAdapter.programs.create(programData);\n    } catch (error) {\n      console.error('Error creating program:', error);\n      throw error;\n    }\n  },\n  update: async (id, programData) => {\n    try {\n      return await ApiAdapter.programs.update(id, programData);\n    } catch (error) {\n      console.error('Error updating program:', error);\n      throw error;\n    }\n  },\n  delete: async id => {\n    try {\n      return await ApiAdapter.programs.delete(id);\n    } catch (error) {\n      console.error('Error deleting program:', error);\n      throw error;\n    }\n  },\n  // Academic hierarchy related methods\n  getByDepartment: async (departmentId, page = 1, limit = 50) => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      const response = await api.get(`${PROGRAM_URL}/department/${departmentId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching programs by department:', error);\n      throw error;\n    }\n  },\n  getByDegreeLevel: async (degreeLevelId, page = 1, limit = 50) => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      const response = await api.get(`${PROGRAM_URL}/degree-level/${degreeLevelId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching programs by degree level:', error);\n      throw error;\n    }\n  },\n  // Related data methods\n  getSubjects: async (programId, page = 1, limit = 20, academicYearId = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(academicYearId && {\n          academic_year_id: academicYearId\n        })\n      });\n      const response = await api.get(`${PROGRAM_URL}/${programId}/subjects?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program subjects:', error);\n      throw error;\n    }\n  },\n  getStudents: async (programId, page = 1, limit = 20, batchId = '', status = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(batchId && {\n          batch_id: batchId\n        }),\n        ...(status && {\n          status\n        })\n      });\n      const response = await api.get(`${PROGRAM_URL}/${programId}/students?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program students:', error);\n      throw error;\n    }\n  },\n  getBatches: async programId => {\n    try {\n      const response = await api.get(`${PROGRAM_URL}/${programId}/batches`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program batches:', error);\n      throw error;\n    }\n  },\n  // Program statistics\n  getStatistics: async programId => {\n    try {\n      const response = await api.get(`${PROGRAM_URL}/${programId}/statistics`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program statistics:', error);\n      throw error;\n    }\n  },\n  // Update program status\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.patch(`${PROGRAM_URL}/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating program status:', error);\n      throw error;\n    }\n  },\n  // Program curriculum management\n  getCurriculum: async (programId, academicYearId = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(academicYearId && {\n          academic_year_id: academicYearId\n        })\n      });\n      const response = await api.get(`${PROGRAM_URL}/${programId}/curriculum?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program curriculum:', error);\n      throw error;\n    }\n  },\n  // Get all active programs (no pagination, for dropdowns)\n  getAllActive: async () => {\n    try {\n      const response = await api.get(`${PROGRAM_URL}/active`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching active programs:', error);\n      throw error;\n    }\n  }\n};\nexport default ProgramService;","map":{"version":3,"names":["ApiAdapter","api","PROGRAM_URL","ProgramService","getAll","page","limit","search","departmentId","degreeLevelId","programs","error","console","success","count","totalPages","currentPage","data","message","getById","id","create","programData","update","delete","getByDepartment","params","URLSearchParams","toString","response","get","getByDegreeLevel","getSubjects","programId","academicYearId","academic_year_id","getStudents","batchId","status","batch_id","getBatches","getStatistics","updateStatus","patch","getCurriculum","getAllActive"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/program.service.js"],"sourcesContent":["import ApiAdapter from './api-adapter';\n\n// Keep the original api import for backward compatibility during transition\nimport api from './api';\n\nconst PROGRAM_URL = '/programs';\n\nconst ProgramService = {\n  // Basic CRUD operations with error handling\n  getAll: async (page = 1, limit = 10, search = '', departmentId = '', degreeLevelId = '') => {\n    try {\n      // Use ApiAdapter for better compatibility with both backends\n      return await ApiAdapter.programs.getAll(page, limit, search);\n    } catch (error) {\n      console.error('Error fetching programs:', error);\n      // Return a default structure to prevent UI crashes\n      return {\n        success: false,\n        count: 0,\n        totalPages: 1,\n        currentPage: page,\n        data: [],\n        error: error.message || 'Failed to fetch programs'\n      };\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      return await ApiAdapter.programs.getById(id);\n    } catch (error) {\n      console.error('Error fetching program:', error);\n      throw error;\n    }\n  },\n\n  create: async (programData) => {\n    try {\n      return await ApiAdapter.programs.create(programData);\n    } catch (error) {\n      console.error('Error creating program:', error);\n      throw error;\n    }\n  },\n\n  update: async (id, programData) => {\n    try {\n      return await ApiAdapter.programs.update(id, programData);\n    } catch (error) {\n      console.error('Error updating program:', error);\n      throw error;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      return await ApiAdapter.programs.delete(id);\n    } catch (error) {\n      console.error('Error deleting program:', error);\n      throw error;\n    }\n  },\n\n  // Academic hierarchy related methods\n  getByDepartment: async (departmentId, page = 1, limit = 50) => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n\n      const response = await api.get(`${PROGRAM_URL}/department/${departmentId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching programs by department:', error);\n      throw error;\n    }\n  },\n\n  getByDegreeLevel: async (degreeLevelId, page = 1, limit = 50) => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n\n      const response = await api.get(`${PROGRAM_URL}/degree-level/${degreeLevelId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching programs by degree level:', error);\n      throw error;\n    }\n  },\n  \n  // Related data methods\n  getSubjects: async (programId, page = 1, limit = 20, academicYearId = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(academicYearId && { academic_year_id: academicYearId })\n      });\n\n      const response = await api.get(`${PROGRAM_URL}/${programId}/subjects?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program subjects:', error);\n      throw error;\n    }\n  },\n\n  getStudents: async (programId, page = 1, limit = 20, batchId = '', status = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(batchId && { batch_id: batchId }),\n        ...(status && { status })\n      });\n\n      const response = await api.get(`${PROGRAM_URL}/${programId}/students?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program students:', error);\n      throw error;\n    }\n  },\n  \n  getBatches: async (programId) => {\n    try {\n      const response = await api.get(`${PROGRAM_URL}/${programId}/batches`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program batches:', error);\n      throw error;\n    }\n  },\n  \n  // Program statistics\n  getStatistics: async (programId) => {\n    try {\n      const response = await api.get(`${PROGRAM_URL}/${programId}/statistics`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program statistics:', error);\n      throw error;\n    }\n  },\n  \n  // Update program status\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.patch(`${PROGRAM_URL}/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating program status:', error);\n      throw error;\n    }\n  },\n  \n  // Program curriculum management\n  getCurriculum: async (programId, academicYearId = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(academicYearId && { academic_year_id: academicYearId })\n      });\n\n      const response = await api.get(`${PROGRAM_URL}/${programId}/curriculum?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching program curriculum:', error);\n      throw error;\n    }\n  },\n  \n  // Get all active programs (no pagination, for dropdowns)\n  getAllActive: async () => {\n    try {\n      const response = await api.get(`${PROGRAM_URL}/active`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching active programs:', error);\n      throw error;\n    }\n  }\n};\n\nexport default ProgramService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}