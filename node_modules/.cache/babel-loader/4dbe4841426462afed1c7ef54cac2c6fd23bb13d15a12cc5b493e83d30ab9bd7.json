{"ast":null,"code":"import axios from 'axios';\n// Real-time service removed\n\n// Real-time API functionality removed\n\n// Mock data for dashboards\nconst mockAdminDashboardStats = {\n  totalStudents: 1250,\n  activeStudents: 1180,\n  totalTeachers: 75,\n  totalPrograms: 12,\n  recentEnrollments: 45,\n  currentAcademicYear: '2024-2025',\n  studentsByProgram: [{\n    programName: 'Bachelor of Information Technology',\n    count: 320\n  }, {\n    programName: 'Bachelor of Business Administration',\n    count: 280\n  }, {\n    programName: 'Associate Degree in Software Development',\n    count: 150\n  }, {\n    programName: 'Bachelor of English Literature',\n    count: 120\n  }],\n  recentActivity: [{\n    name: 'John Doe',\n    action: 'enrolled in Bachelor of IT',\n    created_at: '2024-06-30 14:25:00',\n    type: 'enrollment'\n  }, {\n    name: 'Sarah Smith',\n    action: 'recorded attendance for Web Development class',\n    created_at: '2024-06-30 10:15:00',\n    type: 'attendance'\n  }, {\n    name: 'Mike Johnson',\n    action: 'submitted grades for Database Systems',\n    created_at: '2024-06-29 16:30:00',\n    type: 'grade'\n  }]\n};\nconst mockStudentDashboardStats = {\n  studentInfo: {\n    name: 'Dara Sok',\n    id: 'S2023001',\n    program: 'Bachelor of Information Technology',\n    batch: '2023-2027',\n    gpa: 3.75\n  },\n  attendance: {\n    present: 92,\n    absent: 3,\n    late: 4,\n    excused: 1\n  },\n  courses: [{\n    code: 'CS101',\n    name: 'Introduction to Programming',\n    grade: 'A',\n    credits: 3\n  }, {\n    code: 'CS102',\n    name: 'Data Structures',\n    grade: 'A-',\n    credits: 3\n  }]\n};\nconst mockTeacherDashboardStats = {\n  teacherInfo: {\n    name: 'Sopheap Keo',\n    id: 'T2020005',\n    department: 'Information Technology',\n    courses: 4\n  },\n  courseLoad: {\n    currentCourses: 4,\n    totalStudents: 120\n  }\n};\nconst mockParentDashboardStats = {\n  parentInfo: {\n    name: 'Chanthy Meas',\n    id: 'P2023010',\n    children: 2\n  }\n};\n\n// Helper function to add mock flag\nconst addMockFlag = data => {\n  return {\n    ...data,\n    _isMockData: true\n  };\n};\n\n// Helper function for API calls that prioritizes real data\n// Helper function to validate and normalize activity data\nconst normalizeActivity = activity => {\n  if (!activity || typeof activity !== 'object') {\n    return null;\n  }\n  return {\n    name: activity.name || 'Unknown User',\n    action: activity.action || 'performed an action',\n    created_at: activity.created_at || new Date().toISOString(),\n    type: activity.type || 'action'\n  };\n};\n\n// Helper function to validate and normalize dashboard stats\nconst normalizeDashboardStats = data => {\n  const stats = {\n    totalStudents: parseInt(data === null || data === void 0 ? void 0 : data.totalStudents) || 0,\n    activeStudents: parseInt(data === null || data === void 0 ? void 0 : data.activeStudents) || 0,\n    totalTeachers: parseInt(data === null || data === void 0 ? void 0 : data.totalTeachers) || 0,\n    totalPrograms: parseInt(data === null || data === void 0 ? void 0 : data.totalPrograms) || 0,\n    recentEnrollments: parseInt(data === null || data === void 0 ? void 0 : data.recentEnrollments) || 0,\n    currentYear: (data === null || data === void 0 ? void 0 : data.currentAcademicYear) || '',\n    studentsByProgram: Array.isArray(data === null || data === void 0 ? void 0 : data.studentsByProgram) ? data.studentsByProgram : [],\n    recentActivity: []\n  };\n\n  // Normalize activity data\n  if (Array.isArray(data === null || data === void 0 ? void 0 : data.recentActivity)) {\n    stats.recentActivity = data.recentActivity.map(normalizeActivity).filter(Boolean); // Remove null values\n  }\n  return stats;\n};\nconst safeApiCall = async (apiCall, mockData) => {\n  try {\n    const response = await apiCall();\n    if (!response || !response.data) {\n      console.error('API call returned empty data');\n      throw new Error('Failed to load data from database');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error; // Propagate the error to be handled by the UI\n  }\n};\n\n// Stats service object\nconst statsService = {\n  // Get admin dashboard stats\n  async getAdminDashboardStats() {\n    try {\n      // Try the authenticated Node.js API first (most reliable for real data)\n      try {\n        console.log('Attempting to fetch dashboard stats from authenticated Node.js API...');\n        const token = localStorage.getItem('token');\n\n        // Create a custom axios instance for this request to prevent global interceptor redirects\n        const customAxios = axios.create({\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Add custom response interceptor to handle auth errors without redirects\n        customAxios.interceptors.response.use(response => response, error => {\n          if (error.response && error.response.status === 401) {\n            // Mark this as an auth error but don't redirect\n            console.log('Authentication error in stats service, not redirecting');\n            error.isAuthError = true;\n          }\n          return Promise.reject(error);\n        });\n        const apiResponse = await customAxios.get('http://localhost:5000/api/dashboard/stats');\n        if (apiResponse.data && apiResponse.data.success) {\n          console.log('Successfully fetched dashboard stats from Node.js API');\n          const normalizedStats = normalizeDashboardStats(apiResponse.data.data);\n          return {\n            ...normalizedStats,\n            isMockData: false\n          };\n        }\n        throw new Error('API returned unsuccessful response');\n      } catch (apiError) {\n        console.error('Node.js API failed:', apiError);\n\n        // Check if this is an auth error\n        if (apiError.isAuthError || apiError.response && apiError.response.status === 401) {\n          // Propagate the auth error to the component\n          apiError.isAuthError = true;\n          throw apiError;\n        }\n\n        // All real-time services and PHP fallback removed\n        console.log('API failed and no fallback available, using mock data');\n\n        // Return normalized mock data with proper structure and flag\n        const normalizedStats = normalizeDashboardStats(mockAdminDashboardStats);\n        const mockData = {\n          ...normalizedStats,\n          isMockData: true\n        };\n        console.log('Returning normalized mock data:', mockData);\n        return mockData;\n      }\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || error.response && error.response.status === 401) {\n        error.isAuthError = true;\n        throw error;\n      }\n      console.error('Error in getAdminDashboardStats:', error);\n      return addMockFlag(mockAdminDashboardStats);\n    }\n  },\n  // Legacy function for backward compatibility\n  async getStats() {\n    try {\n      return await this.getAdminDashboardStats();\n    } catch (error) {\n      console.error('Error in getStats:', error);\n      return addMockFlag(mockAdminDashboardStats);\n    }\n  },\n  // Get student dashboard stats\n  async getStudentStats(studentId = 1) {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Create a custom axios instance for this request to prevent global interceptor redirects\n      const customAxios = axios.create({\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Add custom response interceptor to handle auth errors without redirects\n      customAxios.interceptors.response.use(response => response, error => {\n        if (error.response && error.response.status === 401) {\n          // Mark this as an auth error but don't redirect\n          console.log('Authentication error in student stats service, not redirecting');\n          error.isAuthError = true;\n        }\n        return Promise.reject(error);\n      });\n      const response = await customAxios.get(`http://localhost:5000/api/students/${studentId}/dashboard`);\n      return response.data;\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || error.response && error.response.status === 401) {\n        error.isAuthError = true;\n        throw error;\n      }\n      console.error('Error fetching student stats:', error);\n      return addMockFlag(mockStudentDashboardStats);\n    }\n  },\n  // Get parent dashboard stats\n  async getParentStats(parentId = 1) {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Create a custom axios instance for this request to prevent global interceptor redirects\n      const customAxios = axios.create({\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Add custom response interceptor to handle auth errors without redirects\n      customAxios.interceptors.response.use(response => response, error => {\n        if (error.response && error.response.status === 401) {\n          // Mark this as an auth error but don't redirect\n          console.log('Authentication error in parent stats service, not redirecting');\n          error.isAuthError = true;\n        }\n        return Promise.reject(error);\n      });\n      const response = await customAxios.get(`http://localhost:5000/api/parents/${parentId}/dashboard`);\n      return response.data;\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || error.response && error.response.status === 401) {\n        error.isAuthError = true;\n        throw error;\n      }\n      console.error('Error fetching parent stats:', error);\n      return addMockFlag(mockParentDashboardStats);\n    }\n  },\n  // Get teacher dashboard stats\n  async getTeacherStats(teacherId = 1) {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Create a custom axios instance for this request to prevent global interceptor redirects\n      const customAxios = axios.create({\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Add custom response interceptor to handle auth errors without redirects\n      customAxios.interceptors.response.use(response => response, error => {\n        if (error.response && error.response.status === 401) {\n          // Mark this as an auth error but don't redirect\n          console.log('Authentication error in teacher stats service, not redirecting');\n          error.isAuthError = true;\n        }\n        return Promise.reject(error);\n      });\n      const response = await customAxios.get(`http://localhost:5000/api/teachers/${teacherId}/dashboard`);\n      return response.data;\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || error.response && error.response.status === 401) {\n        error.isAuthError = true;\n        throw error;\n      }\n      console.error('Error fetching teacher stats:', error);\n      return addMockFlag(mockTeacherDashboardStats);\n    }\n  }\n};\nexport default statsService;","map":{"version":3,"names":["axios","mockAdminDashboardStats","totalStudents","activeStudents","totalTeachers","totalPrograms","recentEnrollments","currentAcademicYear","studentsByProgram","programName","count","recentActivity","name","action","created_at","type","mockStudentDashboardStats","studentInfo","id","program","batch","gpa","attendance","present","absent","late","excused","courses","code","grade","credits","mockTeacherDashboardStats","teacherInfo","department","courseLoad","currentCourses","mockParentDashboardStats","parentInfo","children","addMockFlag","data","_isMockData","normalizeActivity","activity","Date","toISOString","normalizeDashboardStats","stats","parseInt","currentYear","Array","isArray","map","filter","Boolean","safeApiCall","apiCall","mockData","response","console","error","Error","statsService","getAdminDashboardStats","log","token","localStorage","getItem","customAxios","create","headers","interceptors","use","status","isAuthError","Promise","reject","apiResponse","get","success","normalizedStats","isMockData","apiError","getStats","getStudentStats","studentId","getParentStats","parentId","getTeacherStats","teacherId"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/stats.service.js"],"sourcesContent":["import axios from 'axios';\n// Real-time service removed\n\n// Real-time API functionality removed\n\n// Mock data for dashboards\nconst mockAdminDashboardStats = {\n  totalStudents: 1250,\n  activeStudents: 1180,\n  totalTeachers: 75,\n  totalPrograms: 12,\n  recentEnrollments: 45,\n  currentAcademicYear: '2024-2025',\n  studentsByProgram: [\n    { programName: 'Bachelor of Information Technology', count: 320 },\n    { programName: 'Bachelor of Business Administration', count: 280 },\n    { programName: 'Associate Degree in Software Development', count: 150 },\n    { programName: 'Bachelor of English Literature', count: 120 }\n  ],\n  recentActivity: [\n    { \n      name: 'John Doe',\n      action: 'enrolled in Bachelor of IT',\n      created_at: '2024-06-30 14:25:00',\n      type: 'enrollment'\n    },\n    { \n      name: 'Sarah Smith',\n      action: 'recorded attendance for Web Development class',\n      created_at: '2024-06-30 10:15:00',\n      type: 'attendance'\n    },\n    { \n      name: 'Mike Johnson',\n      action: 'submitted grades for Database Systems',\n      created_at: '2024-06-29 16:30:00',\n      type: 'grade'\n    }\n  ]\n};\n\nconst mockStudentDashboardStats = {\n  studentInfo: {\n    name: 'Dara Sok',\n    id: 'S2023001',\n    program: 'Bachelor of Information Technology',\n    batch: '2023-2027',\n    gpa: 3.75\n  },\n  attendance: { present: 92, absent: 3, late: 4, excused: 1 },\n  courses: [\n    { code: 'CS101', name: 'Introduction to Programming', grade: 'A', credits: 3 },\n    { code: 'CS102', name: 'Data Structures', grade: 'A-', credits: 3 }\n  ]\n};\n\nconst mockTeacherDashboardStats = {\n  teacherInfo: {\n    name: 'Sopheap Keo',\n    id: 'T2020005',\n    department: 'Information Technology',\n    courses: 4\n  },\n  courseLoad: { currentCourses: 4, totalStudents: 120 }\n};\n\nconst mockParentDashboardStats = {\n  parentInfo: {\n    name: 'Chanthy Meas',\n    id: 'P2023010',\n    children: 2\n  }\n};\n\n// Helper function to add mock flag\nconst addMockFlag = (data) => {\n  return {\n    ...data,\n    _isMockData: true\n  };\n};\n\n// Helper function for API calls that prioritizes real data\n// Helper function to validate and normalize activity data\nconst normalizeActivity = (activity) => {\n  if (!activity || typeof activity !== 'object') {\n    return null;\n  }\n  return {\n    name: activity.name || 'Unknown User',\n    action: activity.action || 'performed an action',\n    created_at: activity.created_at || new Date().toISOString(),\n    type: activity.type || 'action'\n  };\n};\n\n// Helper function to validate and normalize dashboard stats\nconst normalizeDashboardStats = (data) => {\n  const stats = {\n    totalStudents: parseInt(data?.totalStudents) || 0,\n    activeStudents: parseInt(data?.activeStudents) || 0,\n    totalTeachers: parseInt(data?.totalTeachers) || 0,\n    totalPrograms: parseInt(data?.totalPrograms) || 0,\n    recentEnrollments: parseInt(data?.recentEnrollments) || 0,\n    currentYear: data?.currentAcademicYear || '',\n    studentsByProgram: Array.isArray(data?.studentsByProgram) ? data.studentsByProgram : [],\n    recentActivity: []\n  };\n\n  // Normalize activity data\n  if (Array.isArray(data?.recentActivity)) {\n    stats.recentActivity = data.recentActivity\n      .map(normalizeActivity)\n      .filter(Boolean); // Remove null values\n  }\n\n  return stats;\n};\n\nconst safeApiCall = async (apiCall, mockData) => {\n  try {\n    const response = await apiCall();\n    if (!response || !response.data) {\n      console.error('API call returned empty data');\n      throw new Error('Failed to load data from database');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error; // Propagate the error to be handled by the UI\n  }\n};\n\n// Stats service object\nconst statsService = {\n  // Get admin dashboard stats\n  async getAdminDashboardStats() {\n    try {\n      // Try the authenticated Node.js API first (most reliable for real data)\n      try {\n        console.log('Attempting to fetch dashboard stats from authenticated Node.js API...');\n        const token = localStorage.getItem('token');\n        \n        // Create a custom axios instance for this request to prevent global interceptor redirects\n        const customAxios = axios.create({\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        // Add custom response interceptor to handle auth errors without redirects\n        customAxios.interceptors.response.use(\n          response => response,\n          error => {\n            if (error.response && error.response.status === 401) {\n              // Mark this as an auth error but don't redirect\n              console.log('Authentication error in stats service, not redirecting');\n              error.isAuthError = true;\n            }\n            return Promise.reject(error);\n          }\n        );\n        \n        const apiResponse = await customAxios.get('http://localhost:5000/api/dashboard/stats');\n        \n        if (apiResponse.data && apiResponse.data.success) {\n          console.log('Successfully fetched dashboard stats from Node.js API');\n          const normalizedStats = normalizeDashboardStats(apiResponse.data.data);\n          return {\n            ...normalizedStats,\n            isMockData: false\n          };\n        }\n        throw new Error('API returned unsuccessful response');\n      } catch (apiError) {\n        console.error('Node.js API failed:', apiError);\n        \n        // Check if this is an auth error\n        if (apiError.isAuthError || (apiError.response && apiError.response.status === 401)) {\n          // Propagate the auth error to the component\n          apiError.isAuthError = true;\n          throw apiError;\n        }\n        \n        // All real-time services and PHP fallback removed\n        console.log('API failed and no fallback available, using mock data');\n        \n        // Return normalized mock data with proper structure and flag\n        const normalizedStats = normalizeDashboardStats(mockAdminDashboardStats);\n        const mockData = {\n          ...normalizedStats,\n          isMockData: true\n        };\n        console.log('Returning normalized mock data:', mockData);\n        return mockData;\n      }\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || (error.response && error.response.status === 401)) {\n        error.isAuthError = true;\n        throw error;\n      }\n      \n      console.error('Error in getAdminDashboardStats:', error);\n      return addMockFlag(mockAdminDashboardStats);\n    }\n  },\n\n  // Legacy function for backward compatibility\n  async getStats() {\n    try {\n      return await this.getAdminDashboardStats();\n    } catch (error) {\n      console.error('Error in getStats:', error);\n      return addMockFlag(mockAdminDashboardStats);\n    }\n  },\n\n  // Get student dashboard stats\n  async getStudentStats(studentId = 1) {\n    try {\n      const token = localStorage.getItem('token');\n      \n      // Create a custom axios instance for this request to prevent global interceptor redirects\n      const customAxios = axios.create({\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      // Add custom response interceptor to handle auth errors without redirects\n      customAxios.interceptors.response.use(\n        response => response,\n        error => {\n          if (error.response && error.response.status === 401) {\n            // Mark this as an auth error but don't redirect\n            console.log('Authentication error in student stats service, not redirecting');\n            error.isAuthError = true;\n          }\n          return Promise.reject(error);\n        }\n      );\n      \n      const response = await customAxios.get(`http://localhost:5000/api/students/${studentId}/dashboard`);\n      return response.data;\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || (error.response && error.response.status === 401)) {\n        error.isAuthError = true;\n        throw error;\n      }\n      \n      console.error('Error fetching student stats:', error);\n      return addMockFlag(mockStudentDashboardStats);\n    }\n  },\n\n  // Get parent dashboard stats\n  async getParentStats(parentId = 1) {\n    try {\n      const token = localStorage.getItem('token');\n      \n      // Create a custom axios instance for this request to prevent global interceptor redirects\n      const customAxios = axios.create({\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      // Add custom response interceptor to handle auth errors without redirects\n      customAxios.interceptors.response.use(\n        response => response,\n        error => {\n          if (error.response && error.response.status === 401) {\n            // Mark this as an auth error but don't redirect\n            console.log('Authentication error in parent stats service, not redirecting');\n            error.isAuthError = true;\n          }\n          return Promise.reject(error);\n        }\n      );\n      \n      const response = await customAxios.get(`http://localhost:5000/api/parents/${parentId}/dashboard`);\n      return response.data;\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || (error.response && error.response.status === 401)) {\n        error.isAuthError = true;\n        throw error;\n      }\n      \n      console.error('Error fetching parent stats:', error);\n      return addMockFlag(mockParentDashboardStats);\n    }\n  },\n\n  // Get teacher dashboard stats\n  async getTeacherStats(teacherId = 1) {\n    try {\n      const token = localStorage.getItem('token');\n      \n      // Create a custom axios instance for this request to prevent global interceptor redirects\n      const customAxios = axios.create({\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      // Add custom response interceptor to handle auth errors without redirects\n      customAxios.interceptors.response.use(\n        response => response,\n        error => {\n          if (error.response && error.response.status === 401) {\n            // Mark this as an auth error but don't redirect\n            console.log('Authentication error in teacher stats service, not redirecting');\n            error.isAuthError = true;\n          }\n          return Promise.reject(error);\n        }\n      );\n      \n      const response = await customAxios.get(`http://localhost:5000/api/teachers/${teacherId}/dashboard`);\n      return response.data;\n    } catch (error) {\n      // If this is an auth error, propagate it\n      if (error.isAuthError || (error.response && error.response.status === 401)) {\n        error.isAuthError = true;\n        throw error;\n      }\n      \n      console.error('Error fetching teacher stats:', error);\n      return addMockFlag(mockTeacherDashboardStats);\n    }\n  }\n};\n\nexport default statsService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}