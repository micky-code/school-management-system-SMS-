{"ast":null,"code":"import api from './api';\nconst ATTENDANCE_URL = '/attendance';\nconst AttendanceService = {\n  getAll: async (page = 1, limit = 10, search = '', courseId = '', batchId = '', date = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(search && {\n          search\n        }),\n        ...(courseId && {\n          course_id: courseId\n        }),\n        ...(batchId && {\n          batch_id: batchId\n        }),\n        ...(date && {\n          date\n        })\n      });\n      const response = await api.get(`${ATTENDANCE_URL}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance records:', error);\n      throw error;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`${ATTENDANCE_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance record:', error);\n      throw error;\n    }\n  },\n  getByStudent: async (studentId, startDate = '', endDate = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(startDate && {\n          start_date: startDate\n        }),\n        ...(endDate && {\n          end_date: endDate\n        })\n      });\n      const response = await api.get(`${ATTENDANCE_URL}/student/${studentId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching student attendance:', error);\n      throw error;\n    }\n  },\n  getByCourse: async (courseId, date = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(date && {\n          date\n        })\n      });\n      const response = await api.get(`${ATTENDANCE_URL}/course/${courseId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course attendance:', error);\n      throw error;\n    }\n  },\n  getAttendanceReport: async (courseId, startDate, endDate) => {\n    try {\n      const params = new URLSearchParams({\n        course_id: courseId,\n        start_date: startDate,\n        end_date: endDate\n      });\n      const response = await api.get(`${ATTENDANCE_URL}/report?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance report:', error);\n      throw error;\n    }\n  },\n  getAttendanceStats: async (studentId = '', courseId = '', startDate = '', endDate = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(studentId && {\n          student_id: studentId\n        }),\n        ...(courseId && {\n          course_id: courseId\n        }),\n        ...(startDate && {\n          start_date: startDate\n        }),\n        ...(endDate && {\n          end_date: endDate\n        })\n      });\n      const response = await api.get(`${ATTENDANCE_URL}/stats?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance stats:', error);\n      throw error;\n    }\n  },\n  create: async attendanceData => {\n    try {\n      const response = await api.post(ATTENDANCE_URL, attendanceData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating attendance record:', error);\n      throw error;\n    }\n  },\n  bulkCreate: async attendanceRecords => {\n    try {\n      const response = await api.post(`${ATTENDANCE_URL}/bulk`, {\n        records: attendanceRecords\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating bulk attendance records:', error);\n      throw error;\n    }\n  },\n  update: async (id, attendanceData) => {\n    try {\n      const response = await api.put(`${ATTENDANCE_URL}/${id}`, attendanceData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating attendance record:', error);\n      throw error;\n    }\n  },\n  updateStatus: async (id, status, notes = '') => {\n    try {\n      const response = await api.patch(`${ATTENDANCE_URL}/${id}/status`, {\n        status,\n        notes\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating attendance status:', error);\n      throw error;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`${ATTENDANCE_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting attendance record:', error);\n      throw error;\n    }\n  },\n  markAttendanceForClass: async (courseId, date, attendanceList) => {\n    try {\n      const response = await api.post(`${ATTENDANCE_URL}/class`, {\n        course_id: courseId,\n        date,\n        attendance_list: attendanceList\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error marking class attendance:', error);\n      throw error;\n    }\n  }\n};\nexport default AttendanceService;","map":{"version":3,"names":["api","ATTENDANCE_URL","AttendanceService","getAll","page","limit","search","courseId","batchId","date","params","URLSearchParams","toString","course_id","batch_id","response","get","data","error","console","getById","id","getByStudent","studentId","startDate","endDate","start_date","end_date","getByCourse","getAttendanceReport","getAttendanceStats","student_id","create","attendanceData","post","bulkCreate","attendanceRecords","records","update","put","updateStatus","status","notes","patch","delete","markAttendanceForClass","attendanceList","attendance_list"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/attendance.service.js"],"sourcesContent":["import api from './api';\n\nconst ATTENDANCE_URL = '/attendance';\n\nconst AttendanceService = {\n  getAll: async (page = 1, limit = 10, search = '', courseId = '', batchId = '', date = '') => {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(search && { search }),\n        ...(courseId && { course_id: courseId }),\n        ...(batchId && { batch_id: batchId }),\n        ...(date && { date })\n      });\n\n      const response = await api.get(`${ATTENDANCE_URL}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance records:', error);\n      throw error;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`${ATTENDANCE_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance record:', error);\n      throw error;\n    }\n  },\n\n  getByStudent: async (studentId, startDate = '', endDate = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(startDate && { start_date: startDate }),\n        ...(endDate && { end_date: endDate })\n      });\n\n      const response = await api.get(`${ATTENDANCE_URL}/student/${studentId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching student attendance:', error);\n      throw error;\n    }\n  },\n\n  getByCourse: async (courseId, date = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(date && { date })\n      });\n\n      const response = await api.get(`${ATTENDANCE_URL}/course/${courseId}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course attendance:', error);\n      throw error;\n    }\n  },\n\n  getAttendanceReport: async (courseId, startDate, endDate) => {\n    try {\n      const params = new URLSearchParams({\n        course_id: courseId,\n        start_date: startDate,\n        end_date: endDate\n      });\n\n      const response = await api.get(`${ATTENDANCE_URL}/report?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance report:', error);\n      throw error;\n    }\n  },\n\n  getAttendanceStats: async (studentId = '', courseId = '', startDate = '', endDate = '') => {\n    try {\n      const params = new URLSearchParams({\n        ...(studentId && { student_id: studentId }),\n        ...(courseId && { course_id: courseId }),\n        ...(startDate && { start_date: startDate }),\n        ...(endDate && { end_date: endDate })\n      });\n\n      const response = await api.get(`${ATTENDANCE_URL}/stats?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching attendance stats:', error);\n      throw error;\n    }\n  },\n\n  create: async (attendanceData) => {\n    try {\n      const response = await api.post(ATTENDANCE_URL, attendanceData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating attendance record:', error);\n      throw error;\n    }\n  },\n\n  bulkCreate: async (attendanceRecords) => {\n    try {\n      const response = await api.post(`${ATTENDANCE_URL}/bulk`, { records: attendanceRecords });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating bulk attendance records:', error);\n      throw error;\n    }\n  },\n\n  update: async (id, attendanceData) => {\n    try {\n      const response = await api.put(`${ATTENDANCE_URL}/${id}`, attendanceData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating attendance record:', error);\n      throw error;\n    }\n  },\n\n  updateStatus: async (id, status, notes = '') => {\n    try {\n      const response = await api.patch(`${ATTENDANCE_URL}/${id}/status`, { status, notes });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating attendance status:', error);\n      throw error;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`${ATTENDANCE_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting attendance record:', error);\n      throw error;\n    }\n  },\n\n  markAttendanceForClass: async (courseId, date, attendanceList) => {\n    try {\n      const response = await api.post(`${ATTENDANCE_URL}/class`, {\n        course_id: courseId,\n        date,\n        attendance_list: attendanceList\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error marking class attendance:', error);\n      throw error;\n    }\n  }\n};\n\nexport default AttendanceService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}