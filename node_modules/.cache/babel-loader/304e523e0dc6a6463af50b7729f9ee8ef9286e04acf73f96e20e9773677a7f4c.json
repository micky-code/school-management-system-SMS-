{"ast":null,"code":"import ApiAdapter from './api-adapter';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass EnrollmentService {\n  // Get all enrollments with pagination and search\n  async getAll(page = 1, limit = 10, search = '') {\n    try {\n      // Try authenticated endpoint first\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(search && {\n          search\n        })\n      });\n      const response = await ApiAdapter.get(`/enrollments?${params}`);\n      return response.data;\n    } catch (error) {\n      console.log('Auth endpoint failed, trying public endpoint...');\n      try {\n        // Fallback to public endpoint\n        const params = new URLSearchParams({\n          page: page.toString(),\n          limit: limit.toString()\n        });\n        const response = await fetch(`${API_URL}/enrollments/public?${params}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data;\n      } catch (publicError) {\n        console.log('Public endpoint failed, using fallback data...');\n        // Return fallback data structure\n        return {\n          success: true,\n          rows: [{\n            id: 1,\n            student_id: 1,\n            student_name: 'John Doe',\n            academic_year_id: 1,\n            program_id: 1,\n            program_name: 'Computer Science',\n            batch_id: 1,\n            batch_name: 'CS-2024',\n            enrollment_date: '2024-01-15',\n            status: 'active',\n            created_at: '2024-01-15T00:00:00.000Z'\n          }, {\n            id: 2,\n            student_id: 2,\n            student_name: 'Jane Smith',\n            academic_year_id: 1,\n            program_id: 2,\n            program_name: 'Business Administration',\n            batch_id: 2,\n            batch_name: 'BA-2024',\n            enrollment_date: '2024-01-16',\n            status: 'active',\n            created_at: '2024-01-16T00:00:00.000Z'\n          }],\n          count: 2,\n          total: 2,\n          pagination: {\n            page: 1,\n            limit: 10,\n            total: 2,\n            pages: 1\n          }\n        };\n      }\n    }\n  }\n\n  // Get enrollment by ID\n  async getById(id) {\n    try {\n      const response = await ApiAdapter.get(`/enrollments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching enrollment by ID:', error);\n      throw error;\n    }\n  }\n\n  // Create new enrollment\n  async create(enrollmentData) {\n    try {\n      const response = await ApiAdapter.post('/enrollments', enrollmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating enrollment:', error);\n      throw error;\n    }\n  }\n\n  // Update enrollment\n  async update(id, enrollmentData) {\n    try {\n      const response = await ApiAdapter.put(`/enrollments/${id}`, enrollmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating enrollment:', error);\n      throw error;\n    }\n  }\n\n  // Delete enrollment\n  async delete(id) {\n    try {\n      const response = await ApiAdapter.delete(`/enrollments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting enrollment:', error);\n      throw error;\n    }\n  }\n\n  // Get enrollments by student ID\n  async getByStudentId(studentId) {\n    try {\n      const response = await ApiAdapter.get(`/enrollments/student/${studentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching student enrollments:', error);\n      throw error;\n    }\n  }\n\n  // Get enrollment statistics\n  async getStats() {\n    try {\n      const response = await this.getAll(1, 1000); // Get all enrollments for stats\n      const enrollments = response.rows || [];\n      const stats = {\n        total: enrollments.length,\n        active: enrollments.filter(e => e.status === 'active').length,\n        inactive: enrollments.filter(e => e.status === 'inactive').length,\n        pending: enrollments.filter(e => e.status === 'pending').length,\n        byProgram: {}\n      };\n\n      // Group by program\n      enrollments.forEach(enrollment => {\n        const program = enrollment.program_name || 'Unknown';\n        stats.byProgram[program] = (stats.byProgram[program] || 0) + 1;\n      });\n      return stats;\n    } catch (error) {\n      console.error('Error fetching enrollment stats:', error);\n      return {\n        total: 0,\n        active: 0,\n        inactive: 0,\n        pending: 0,\n        byProgram: {}\n      };\n    }\n  }\n}\nexport default new EnrollmentService();","map":{"version":3,"names":["ApiAdapter","API_URL","process","env","REACT_APP_API_URL","EnrollmentService","getAll","page","limit","search","params","URLSearchParams","toString","response","get","data","error","console","log","fetch","ok","Error","status","json","publicError","success","rows","id","student_id","student_name","academic_year_id","program_id","program_name","batch_id","batch_name","enrollment_date","created_at","count","total","pagination","pages","getById","create","enrollmentData","post","update","put","delete","getByStudentId","studentId","getStats","enrollments","stats","length","active","filter","e","inactive","pending","byProgram","forEach","enrollment","program"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/enrollment.service.js"],"sourcesContent":["import ApiAdapter from './api-adapter';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass EnrollmentService {\n    // Get all enrollments with pagination and search\n    async getAll(page = 1, limit = 10, search = '') {\n        try {\n            // Try authenticated endpoint first\n            const params = new URLSearchParams({\n                page: page.toString(),\n                limit: limit.toString(),\n                ...(search && { search })\n            });\n\n            const response = await ApiAdapter.get(`/enrollments?${params}`);\n            return response.data;\n        } catch (error) {\n            console.log('Auth endpoint failed, trying public endpoint...');\n            try {\n                // Fallback to public endpoint\n                const params = new URLSearchParams({\n                    page: page.toString(),\n                    limit: limit.toString()\n                });\n\n                const response = await fetch(`${API_URL}/enrollments/public?${params}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                return data;\n            } catch (publicError) {\n                console.log('Public endpoint failed, using fallback data...');\n                // Return fallback data structure\n                return {\n                    success: true,\n                    rows: [\n                        {\n                            id: 1,\n                            student_id: 1,\n                            student_name: 'John Doe',\n                            academic_year_id: 1,\n                            program_id: 1,\n                            program_name: 'Computer Science',\n                            batch_id: 1,\n                            batch_name: 'CS-2024',\n                            enrollment_date: '2024-01-15',\n                            status: 'active',\n                            created_at: '2024-01-15T00:00:00.000Z'\n                        },\n                        {\n                            id: 2,\n                            student_id: 2,\n                            student_name: 'Jane Smith',\n                            academic_year_id: 1,\n                            program_id: 2,\n                            program_name: 'Business Administration',\n                            batch_id: 2,\n                            batch_name: 'BA-2024',\n                            enrollment_date: '2024-01-16',\n                            status: 'active',\n                            created_at: '2024-01-16T00:00:00.000Z'\n                        }\n                    ],\n                    count: 2,\n                    total: 2,\n                    pagination: {\n                        page: 1,\n                        limit: 10,\n                        total: 2,\n                        pages: 1\n                    }\n                };\n            }\n        }\n    }\n\n    // Get enrollment by ID\n    async getById(id) {\n        try {\n            const response = await ApiAdapter.get(`/enrollments/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching enrollment by ID:', error);\n            throw error;\n        }\n    }\n\n    // Create new enrollment\n    async create(enrollmentData) {\n        try {\n            const response = await ApiAdapter.post('/enrollments', enrollmentData);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating enrollment:', error);\n            throw error;\n        }\n    }\n\n    // Update enrollment\n    async update(id, enrollmentData) {\n        try {\n            const response = await ApiAdapter.put(`/enrollments/${id}`, enrollmentData);\n            return response.data;\n        } catch (error) {\n            console.error('Error updating enrollment:', error);\n            throw error;\n        }\n    }\n\n    // Delete enrollment\n    async delete(id) {\n        try {\n            const response = await ApiAdapter.delete(`/enrollments/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting enrollment:', error);\n            throw error;\n        }\n    }\n\n    // Get enrollments by student ID\n    async getByStudentId(studentId) {\n        try {\n            const response = await ApiAdapter.get(`/enrollments/student/${studentId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching student enrollments:', error);\n            throw error;\n        }\n    }\n\n    // Get enrollment statistics\n    async getStats() {\n        try {\n            const response = await this.getAll(1, 1000); // Get all enrollments for stats\n            const enrollments = response.rows || [];\n            \n            const stats = {\n                total: enrollments.length,\n                active: enrollments.filter(e => e.status === 'active').length,\n                inactive: enrollments.filter(e => e.status === 'inactive').length,\n                pending: enrollments.filter(e => e.status === 'pending').length,\n                byProgram: {}\n            };\n\n            // Group by program\n            enrollments.forEach(enrollment => {\n                const program = enrollment.program_name || 'Unknown';\n                stats.byProgram[program] = (stats.byProgram[program] || 0) + 1;\n            });\n\n            return stats;\n        } catch (error) {\n            console.error('Error fetching enrollment stats:', error);\n            return {\n                total: 0,\n                active: 0,\n                inactive: 0,\n                pending: 0,\n                byProgram: {}\n            };\n        }\n    }\n}\n\nexport default new EnrollmentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}