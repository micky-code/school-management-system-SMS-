{"ast":null,"code":"/**\n * Authentication service for handling JWT tokens and auth-related functions\n */\n\n// Get auth token from localStorage\nexport const getAuthToken = () => {\n  const token = localStorage.getItem('token');\n  console.log('Retrieved token from localStorage:', token ? 'Token exists' : 'No token');\n  return token;\n};\n\n// Set auth token in localStorage\nexport const setAuthToken = token => {\n  if (token) {\n    console.log('Setting auth token in localStorage');\n    localStorage.setItem('token', token);\n    // Also set in axios headers for immediate use\n    const axios = require('axios');\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    console.log('Removing auth token from localStorage');\n    localStorage.removeItem('token');\n    // Also remove from axios headers\n    const axios = require('axios');\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Remove auth token from localStorage\nexport const removeAuthToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  return !!token; // Returns true if token exists\n};\n\n// Get user info from token\nexport const getUserInfo = () => {\n  const userInfo = localStorage.getItem('userInfo');\n  return userInfo ? JSON.parse(userInfo) : null;\n};\n\n// Set user info in localStorage\nexport const setUserInfo = userInfo => {\n  if (userInfo) {\n    localStorage.setItem('userInfo', JSON.stringify(userInfo));\n  } else {\n    localStorage.removeItem('userInfo');\n  }\n};\n\n// Remove user info from localStorage\nexport const removeUserInfo = () => {\n  localStorage.removeItem('userInfo');\n};\n\n// Logout user\nexport const logout = () => {\n  removeAuthToken();\n  removeUserInfo();\n};\nexport default {\n  getAuthToken,\n  setAuthToken,\n  removeAuthToken,\n  isAuthenticated,\n  getUserInfo,\n  setUserInfo,\n  removeUserInfo,\n  logout\n};","map":{"version":3,"names":["getAuthToken","token","localStorage","getItem","console","log","setAuthToken","setItem","axios","require","defaults","headers","common","removeItem","removeAuthToken","isAuthenticated","getUserInfo","userInfo","JSON","parse","setUserInfo","stringify","removeUserInfo","logout"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/services/authService.js"],"sourcesContent":["/**\n * Authentication service for handling JWT tokens and auth-related functions\n */\n\n// Get auth token from localStorage\nexport const getAuthToken = () => {\n  const token = localStorage.getItem('token');\n  console.log('Retrieved token from localStorage:', token ? 'Token exists' : 'No token');\n  return token;\n};\n\n// Set auth token in localStorage\nexport const setAuthToken = (token) => {\n  if (token) {\n    console.log('Setting auth token in localStorage');\n    localStorage.setItem('token', token);\n    // Also set in axios headers for immediate use\n    const axios = require('axios');\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    console.log('Removing auth token from localStorage');\n    localStorage.removeItem('token');\n    // Also remove from axios headers\n    const axios = require('axios');\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Remove auth token from localStorage\nexport const removeAuthToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  return !!token; // Returns true if token exists\n};\n\n// Get user info from token\nexport const getUserInfo = () => {\n  const userInfo = localStorage.getItem('userInfo');\n  return userInfo ? JSON.parse(userInfo) : null;\n};\n\n// Set user info in localStorage\nexport const setUserInfo = (userInfo) => {\n  if (userInfo) {\n    localStorage.setItem('userInfo', JSON.stringify(userInfo));\n  } else {\n    localStorage.removeItem('userInfo');\n  }\n};\n\n// Remove user info from localStorage\nexport const removeUserInfo = () => {\n  localStorage.removeItem('userInfo');\n};\n\n// Logout user\nexport const logout = () => {\n  removeAuthToken();\n  removeUserInfo();\n};\n\nexport default {\n  getAuthToken,\n  setAuthToken,\n  removeAuthToken,\n  isAuthenticated,\n  getUserInfo,\n  setUserInfo,\n  removeUserInfo,\n  logout\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAGA,CAAA,KAAM;EAChC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,KAAK,GAAG,cAAc,GAAG,UAAU,CAAC;EACtF,OAAOA,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAIL,KAAK,IAAK;EACrC,IAAIA,KAAK,EAAE;IACTG,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjDH,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;IACpC;IACA,MAAMO,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;IAC9BD,KAAK,CAACE,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUX,KAAK,EAAE;EACpE,CAAC,MAAM;IACLG,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpDH,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChC;IACA,MAAML,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;IAC9B,OAAOD,KAAK,CAACE,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACvD;AACF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnCZ,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMd,KAAK,GAAGD,YAAY,CAAC,CAAC;EAC5B,OAAO,CAAC,CAACC,KAAK,CAAC,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMe,WAAW,GAAGA,CAAA,KAAM;EAC/B,MAAMC,QAAQ,GAAGf,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,OAAOc,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACF,QAAQ,CAAC,GAAG,IAAI;AAC/C,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAIH,QAAQ,IAAK;EACvC,IAAIA,QAAQ,EAAE;IACZf,YAAY,CAACK,OAAO,CAAC,UAAU,EAAEW,IAAI,CAACG,SAAS,CAACJ,QAAQ,CAAC,CAAC;EAC5D,CAAC,MAAM;IACLf,YAAY,CAACW,UAAU,CAAC,UAAU,CAAC;EACrC;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,cAAc,GAAGA,CAAA,KAAM;EAClCpB,YAAY,CAACW,UAAU,CAAC,UAAU,CAAC;AACrC,CAAC;;AAED;AACA,OAAO,MAAMU,MAAM,GAAGA,CAAA,KAAM;EAC1BT,eAAe,CAAC,CAAC;EACjBQ,cAAc,CAAC,CAAC;AAClB,CAAC;AAED,eAAe;EACbtB,YAAY;EACZM,YAAY;EACZQ,eAAe;EACfC,eAAe;EACfC,WAAW;EACXI,WAAW;EACXE,cAAc;EACdC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}