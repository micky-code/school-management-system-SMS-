{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\sms-frontend-clone\\\\src\\\\components\\\\realtime\\\\WebSocketProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\n * WebSocket Context Provider for global real-time communication\n */\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport useWebSocket from '../../hooks/useWebSocket';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext();\nexport const useWebSocketContext = () => {\n  _s();\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocketContext must be used within a WebSocketProvider');\n  }\n  return context;\n};\n_s(useWebSocketContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [connectionStats, setConnectionStats] = useState(null);\n\n  // API base URL for real-time server\n  const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5002';\n  const WS_BASE = API_BASE.replace('http', 'ws');\n\n  // Get auth token for WebSocket authentication\n  const getAuthToken = () => {\n    return localStorage.getItem('token');\n  };\n\n  // WebSocket connection with authentication\n  const {\n    lastMessage,\n    connectionStatus,\n    sendJsonMessage,\n    readyState\n  } = useWebSocket(`${WS_BASE}/ws`, {\n    onMessage: message => {\n      handleGlobalMessage(message);\n    },\n    onOpen: () => {\n      setIsConnected(true);\n      console.log('Global WebSocket connected');\n\n      // Send initial subscription\n      sendJsonMessage({\n        type: 'subscribe',\n        data_types: ['students', 'attendance', 'grades', 'system_notifications']\n      });\n\n      // Get connection stats\n      sendJsonMessage({\n        type: 'get_stats'\n      });\n    },\n    onClose: () => {\n      setIsConnected(false);\n      console.log('Global WebSocket disconnected');\n    },\n    onError: error => {\n      console.error('Global WebSocket error:', error);\n      setIsConnected(false);\n    }\n  });\n\n  // Handle global WebSocket messages\n  const handleGlobalMessage = message => {\n    const {\n      event_type,\n      data,\n      type\n    } = message;\n\n    // Handle connection stats\n    if (type === 'stats') {\n      setConnectionStats(data);\n      return;\n    }\n\n    // Handle system notifications\n    if (event_type === 'system_notification') {\n      const notification = {\n        id: Date.now(),\n        message: data.message,\n        level: data.level || 'info',\n        timestamp: new Date()\n      };\n      setNotifications(prev => [notification, ...prev.slice(0, 49)]); // Keep last 50\n\n      // Show toast notification\n      switch (data.level) {\n        case 'success':\n          toast.success(data.message);\n          break;\n        case 'warning':\n          toast.warning(data.message);\n          break;\n        case 'error':\n          toast.error(data.message);\n          break;\n        default:\n          toast.info(data.message);\n      }\n    }\n\n    // Handle data refresh events\n    if (event_type === 'data_refresh') {\n      console.log(`Data refresh event: ${data.entity_type}`);\n      // Emit custom event for components to listen to\n      window.dispatchEvent(new CustomEvent('dataRefresh', {\n        detail: {\n          entityType: data.entity_type,\n          action: data.action\n        }\n      }));\n    }\n\n    // Handle specific entity events\n    if (event_type !== null && event_type !== void 0 && event_type.startsWith('student_')) {\n      window.dispatchEvent(new CustomEvent('studentUpdate', {\n        detail: {\n          eventType: event_type,\n          data\n        }\n      }));\n    }\n    if (event_type !== null && event_type !== void 0 && event_type.startsWith('attendance_')) {\n      window.dispatchEvent(new CustomEvent('attendanceUpdate', {\n        detail: {\n          eventType: event_type,\n          data\n        }\n      }));\n    }\n    if (event_type !== null && event_type !== void 0 && event_type.startsWith('grade_')) {\n      window.dispatchEvent(new CustomEvent('gradeUpdate', {\n        detail: {\n          eventType: event_type,\n          data\n        }\n      }));\n    }\n  };\n\n  // Send message through WebSocket\n  const sendMessage = message => {\n    if (isConnected) {\n      sendJsonMessage(message);\n      return true;\n    }\n    return false;\n  };\n\n  // Broadcast notification to all users\n  const broadcastNotification = async (message, level = 'info') => {\n    try {\n      const response = await fetch(`${API_BASE}/ws/broadcast`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${getAuthToken()}`\n        },\n        body: JSON.stringify({\n          event_type: 'system_notification',\n          data: {\n            message,\n            level\n          },\n          connection_type: 'all'\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to broadcast notification');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error broadcasting notification:', error);\n      return {\n        status: 'error',\n        message: error.message\n      };\n    }\n  };\n\n  // Clear notifications\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n\n  // Get unread notification count\n  const getUnreadCount = () => {\n    return notifications.filter(n => !n.read).length;\n  };\n\n  // Mark notification as read\n  const markAsRead = notificationId => {\n    setNotifications(prev => prev.map(n => n.id === notificationId ? {\n      ...n,\n      read: true\n    } : n));\n  };\n\n  // Ping server to keep connection alive\n  useEffect(() => {\n    if (isConnected) {\n      const pingInterval = setInterval(() => {\n        sendJsonMessage({\n          type: 'ping',\n          timestamp: Date.now()\n        });\n      }, 30000); // Ping every 30 seconds\n\n      return () => clearInterval(pingInterval);\n    }\n  }, [isConnected, sendJsonMessage]);\n  const contextValue = {\n    // Connection state\n    isConnected,\n    connectionStatus,\n    connectionStats,\n    // Messaging\n    sendMessage,\n    broadcastNotification,\n    // Notifications\n    notifications,\n    clearNotifications,\n    getUnreadCount,\n    markAsRead,\n    // WebSocket instance\n    lastMessage,\n    readyState\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s2(WebSocketProvider, \"e6xJuK/pmDMBTQharUUK7kYnPrA=\", false, function () {\n  return [useWebSocket];\n});\n_c = WebSocketProvider;\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useWebSocket","toast","jsxDEV","_jsxDEV","WebSocketContext","useWebSocketContext","_s","context","Error","WebSocketProvider","children","_s2","isConnected","setIsConnected","notifications","setNotifications","connectionStats","setConnectionStats","API_BASE","process","env","REACT_APP_API_URL","WS_BASE","replace","getAuthToken","localStorage","getItem","lastMessage","connectionStatus","sendJsonMessage","readyState","onMessage","message","handleGlobalMessage","onOpen","console","log","type","data_types","onClose","onError","error","event_type","data","notification","id","Date","now","level","timestamp","prev","slice","success","warning","info","entity_type","window","dispatchEvent","CustomEvent","detail","entityType","action","startsWith","eventType","sendMessage","broadcastNotification","response","fetch","method","headers","body","JSON","stringify","connection_type","ok","json","status","clearNotifications","getUnreadCount","filter","n","read","length","markAsRead","notificationId","map","pingInterval","setInterval","clearInterval","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/sms-frontend-clone/src/components/realtime/WebSocketProvider.js"],"sourcesContent":["/**\n * WebSocket Context Provider for global real-time communication\n */\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport useWebSocket from '../../hooks/useWebSocket';\nimport { toast } from 'react-toastify';\n\nconst WebSocketContext = createContext();\n\nexport const useWebSocketContext = () => {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocketContext must be used within a WebSocketProvider');\n  }\n  return context;\n};\n\nexport const WebSocketProvider = ({ children }) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [connectionStats, setConnectionStats] = useState(null);\n\n  // API base URL for real-time server\n  const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5002';\n  const WS_BASE = API_BASE.replace('http', 'ws');\n\n  // Get auth token for WebSocket authentication\n  const getAuthToken = () => {\n    return localStorage.getItem('token');\n  };\n\n  // WebSocket connection with authentication\n  const {\n    lastMessage,\n    connectionStatus,\n    sendJsonMessage,\n    readyState\n  } = useWebSocket(`${WS_BASE}/ws`, {\n    onMessage: (message) => {\n      handleGlobalMessage(message);\n    },\n    onOpen: () => {\n      setIsConnected(true);\n      console.log('Global WebSocket connected');\n      \n      // Send initial subscription\n      sendJsonMessage({\n        type: 'subscribe',\n        data_types: ['students', 'attendance', 'grades', 'system_notifications']\n      });\n      \n      // Get connection stats\n      sendJsonMessage({\n        type: 'get_stats'\n      });\n    },\n    onClose: () => {\n      setIsConnected(false);\n      console.log('Global WebSocket disconnected');\n    },\n    onError: (error) => {\n      console.error('Global WebSocket error:', error);\n      setIsConnected(false);\n    }\n  });\n\n  // Handle global WebSocket messages\n  const handleGlobalMessage = (message) => {\n    const { event_type, data, type } = message;\n\n    // Handle connection stats\n    if (type === 'stats') {\n      setConnectionStats(data);\n      return;\n    }\n\n    // Handle system notifications\n    if (event_type === 'system_notification') {\n      const notification = {\n        id: Date.now(),\n        message: data.message,\n        level: data.level || 'info',\n        timestamp: new Date()\n      };\n      \n      setNotifications(prev => [notification, ...prev.slice(0, 49)]); // Keep last 50\n      \n      // Show toast notification\n      switch (data.level) {\n        case 'success':\n          toast.success(data.message);\n          break;\n        case 'warning':\n          toast.warning(data.message);\n          break;\n        case 'error':\n          toast.error(data.message);\n          break;\n        default:\n          toast.info(data.message);\n      }\n    }\n\n    // Handle data refresh events\n    if (event_type === 'data_refresh') {\n      console.log(`Data refresh event: ${data.entity_type}`);\n      // Emit custom event for components to listen to\n      window.dispatchEvent(new CustomEvent('dataRefresh', {\n        detail: { entityType: data.entity_type, action: data.action }\n      }));\n    }\n\n    // Handle specific entity events\n    if (event_type?.startsWith('student_')) {\n      window.dispatchEvent(new CustomEvent('studentUpdate', {\n        detail: { eventType: event_type, data }\n      }));\n    }\n\n    if (event_type?.startsWith('attendance_')) {\n      window.dispatchEvent(new CustomEvent('attendanceUpdate', {\n        detail: { eventType: event_type, data }\n      }));\n    }\n\n    if (event_type?.startsWith('grade_')) {\n      window.dispatchEvent(new CustomEvent('gradeUpdate', {\n        detail: { eventType: event_type, data }\n      }));\n    }\n  };\n\n  // Send message through WebSocket\n  const sendMessage = (message) => {\n    if (isConnected) {\n      sendJsonMessage(message);\n      return true;\n    }\n    return false;\n  };\n\n  // Broadcast notification to all users\n  const broadcastNotification = async (message, level = 'info') => {\n    try {\n      const response = await fetch(`${API_BASE}/ws/broadcast`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${getAuthToken()}`\n        },\n        body: JSON.stringify({\n          event_type: 'system_notification',\n          data: { message, level },\n          connection_type: 'all'\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to broadcast notification');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error broadcasting notification:', error);\n      return { status: 'error', message: error.message };\n    }\n  };\n\n  // Clear notifications\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n\n  // Get unread notification count\n  const getUnreadCount = () => {\n    return notifications.filter(n => !n.read).length;\n  };\n\n  // Mark notification as read\n  const markAsRead = (notificationId) => {\n    setNotifications(prev => \n      prev.map(n => \n        n.id === notificationId ? { ...n, read: true } : n\n      )\n    );\n  };\n\n  // Ping server to keep connection alive\n  useEffect(() => {\n    if (isConnected) {\n      const pingInterval = setInterval(() => {\n        sendJsonMessage({\n          type: 'ping',\n          timestamp: Date.now()\n        });\n      }, 30000); // Ping every 30 seconds\n\n      return () => clearInterval(pingInterval);\n    }\n  }, [isConnected, sendJsonMessage]);\n\n  const contextValue = {\n    // Connection state\n    isConnected,\n    connectionStatus,\n    connectionStats,\n    \n    // Messaging\n    sendMessage,\n    broadcastNotification,\n    \n    // Notifications\n    notifications,\n    clearNotifications,\n    getUnreadCount,\n    markAsRead,\n    \n    // WebSocket instance\n    lastMessage,\n    readyState\n  };\n\n  return (\n    <WebSocketContext.Provider value={contextValue}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}